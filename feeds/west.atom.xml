<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>West's blog</title><link href="http://szuwest.github.io/" rel="alternate"></link><link href="http://szuwest.github.io/feeds/west.atom.xml" rel="self"></link><id>http://szuwest.github.io/</id><updated>2014-10-15T00:00:00+08:00</updated><entry><title>Good Morning</title><link href="http://szuwest.github.io/good-morning.html" rel="alternate"></link><updated>2014-10-15T00:00:00+08:00</updated><author><name>West</name></author><id>tag:szuwest.github.io,2014-10-15:good-morning.html</id><summary type="html">&lt;p&gt;Hi, good morning. This is from West.&lt;/p&gt;</summary><category term="Test"></category></entry><entry><title>关于程序架构设计</title><link href="http://szuwest.github.io/guan-yu-cheng-xu-jia-gou-she-ji.html" rel="alternate"></link><updated>2014-06-22T00:00:00+08:00</updated><author><name>West</name></author><id>tag:szuwest.github.io,2014-06-22:guan-yu-cheng-xu-jia-gou-she-ji.html</id><summary type="html">&lt;h1&gt;关于程序架构设计&lt;/h1&gt;
&lt;p&gt;最近编程当中，越来越在意程序架构问题，经常纠结怎样才是好的设计，怎样才能将程序解耦，怎样才能写出易扩展，层次分明好维护的程序。可是想来想去也是不能决定怎样做才是最佳。不过最近自己是肯定了一样东西：要想真的做出好的架构，划分好模块是第一次。只要模块划分的清晰，独立和少耦合，后面的事情就好做了。&lt;/p&gt;
&lt;p&gt;这种想法也不单单只有我才有，我现在所在项目负责人在一个程序架构设计的技术讲座上说过这个观点。而我从我们项目的架构也看出他是这样实行的。一般在我们建立项目之初，就先建立好目录结构，而这个目录结构也很讲究，它就直接体现了我们是怎么划分模块和划分层次的。现在我们项目主要分两大块，UI模块和module模块。然后UI目录下就按照功能划分出一个个子目录，对应的再module目录下也是按照功能划分出一个个子目录。这里UI目录下的子目录结构和module目录下的子目录结构基本是一致的。然后在资源文件目录下，也是按照UI子模块那样划分，建立不同的子资源文件。只要划分好了模块，每个模块足够独立的花，每个模块里面是怎么分层，怎么做设计的，对别的模块影响不大。即使这个某个模块做得很烂，到时要重构的也只是那一个模块而已。&lt;/p&gt;
&lt;p&gt;现在我们公司的项目很多模块划分都不是特别好，能够做到像上面那样划分模块和架构的项目估计都是很多。互联网公司人员流动大，三两下就换一拨人，每拨人里面各个技术参差不齐，根本没办法做到很好的架构设计。但是上面这种基础的架构还是可以做的，而且是可以做好的。&lt;/p&gt;
&lt;p&gt;可是光是靠划分模块是做不到一个好的程序架构，而且一个项目有些模块是划分不出来或者跟其他模块联系很多。所以还有其他东西要做。分层就是一个。项目整体可以分层，还有模块里面也可以分层。最经典的分层就是MVC模式。像我们上面的分UI和module就是将项目按MVC分层，V,C分在了UI里，M对应的时module。一般来说，在M之下，还有一层是数据访问层，一般是数据库访问层或者是网络访问层。实际项目都很复杂，各种关联，划分好层次解耦不是件容易的事。还有为了好管理代码和复用，是需要抽出一下共用模块的。例如网络访问的话一般是一个全局共用模块，还有几乎每个移动项目必不可少的图片管理模块等。&lt;/p&gt;
&lt;p&gt;以上说的都是在宏观方面的，真正落实到一行行代码间又有更多要注意的了。这里又有一套编码要遵循规则：API设计，接口设计原则，设计模式等。最近我经常烦的是这个类是不是太大了，要怎么分割才好。这个方法是放在这个类好，还是放在那个类好，还是新建一个类来封装？很多时候我自己都不知道怎样做才是对的，或者说是最好的。我越发觉得自己很弱，很多东西根本无法判断优劣。自己还是太嫩了，代码写的远远不够。每当这个时候我自己就会信心不足。&lt;/p&gt;
&lt;p&gt;唯有多写代码和思考来减少为自己的无知带来的恐惧&lt;/p&gt;</summary><category term="编程感悟"></category></entry><entry><title>swift初探</title><link href="http://szuwest.github.io/swiftchu-tan.html" rel="alternate"></link><updated>2014-06-22T00:00:00+08:00</updated><author><name>West</name></author><id>tag:szuwest.github.io,2014-06-22:swiftchu-tan.html</id><summary type="html">&lt;h1&gt;swift初探&lt;/h1&gt;
&lt;p&gt;自从swift公布以来，火得不得了。如果你是开发者，还没有看过swift，那还真是out了（不过话说回来，并不是没有看过swift就不是好开发者。好的程序员跟看没看过某种语言没有什么关系）。我从公布以来就断断续续的看，一直在看官方的英文文档。偶尔也看看别人写的或者翻译的文章。现在虽然没有把官方文档看完，但是也看了大部分，可以写写感想心得。&lt;/p&gt;
&lt;p&gt;简单来说，swift是集合了许多脚本语言的特性而又不像其他一般的脚本语言的苹果新生代开发语言。swift集合了很多语言的特性，如ruby，object-c，c++，c#等，其中长得最像的应该是ruby。咋看之下swift就想ruby一样的脚本语言。完全面向对象，类型定义，closure特性，函数式编程等等。不过据官方文档介绍，swift语言不是解释型语言，它最终会编译成二进制代码，并且它的运行效率比object-c要快。说比object-C要快我是比较怀疑的，而外国开发者进行了测试，得出结论是如果不强加一些编译优化的话，是快不过objC的。&lt;/p&gt;
&lt;p&gt;如果对ruby，Object-C，c++语言熟悉的话，学起swift来应该没有什么难度。但是它还有很多语法特性是别的语言没有的，并且有些在我看来有点奇怪的特性。不过这是都没有什么，说明自己见识少，熟悉了就好了。首先一个比较特别的是，你不在需要在每行代码结束时加上分号，直接回车换行就行。当然，如果你一行有多句代码，每一句的末尾还是要加分号的。然后另外一个我自己不太适应的是if语句的判断表达式不再需要用括号括起来，我自己感觉很别扭。当然，也还有别的语法，不同，例如函数的定义用func，返回值的表示用"-&gt;".Object-C那种方法调用方式不再有，所有的都是用.来访问和调用。我觉得swift基本上对所有的一些语法特性都是借鉴其他语言一些优秀特性，并且加入了自己特有的方式，形成swift自己独特的语法。比如说函数的形式参数，像c++一样是用括号括起来，可以有默认值，并且可以有外部标签，就是像Object-C一样对每个参数加个标签标明它的意义。还有不知道是否是独创的通过tuple支持多返回值。还有对闭包的支持。我自己的理解是Object-C的block也属于闭包，但是它语法是类C的，swift的closure是纯正的闭包特性，而且可以简化到令人发指的地步。&lt;/p&gt;
&lt;p&gt;swift可以说是很多语言的集大成者，并且超越它所借鉴的那些语言。也是这是苹果要取代Object-C的原因。我以前很喜欢Object-C，现在也喜欢，只是swift出来之后就没那么喜欢了。因为我看到了一个更好的语言。我本身java写得最多，开始是对c++的怕和恨，到对java的喜欢，再到对它的厌倦，然后发现Object-C的不错进而对它喜爱。而现在我要跨越它，进入swift的领地。&lt;/p&gt;
&lt;p&gt;未完待续...&lt;/p&gt;</summary><category term="swift"></category></entry><entry><title>Hello world</title><link href="http://szuwest.github.io/hello-world.html" rel="alternate"></link><updated>2014-06-10T00:00:00+08:00</updated><author><name>West</name></author><id>tag:szuwest.github.io,2014-06-10:hello-world.html</id><summary type="html">&lt;h1&gt;Hello World&lt;/h1&gt;
&lt;p&gt;Hello, world. This is first test.&lt;/p&gt;</summary><category term="Test"></category></entry></feed>