<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>West's blog</title><link href="http://szuwest.github.io/" rel="alternate"></link><link href="http://szuwest.github.io/feeds/west.atom.xml" rel="self"></link><id>http://szuwest.github.io/</id><updated>2014-11-03T00:00:00+08:00</updated><entry><title>Android Activity动画</title><link href="http://szuwest.github.io/android-activitydong-hua.html" rel="alternate"></link><updated>2014-11-03T00:00:00+08:00</updated><author><name>West</name></author><id>tag:szuwest.github.io,2014-11-03:android-activitydong-hua.html</id><summary type="html">&lt;h1&gt;Android 动画(一)&lt;/h1&gt;
&lt;h2&gt;3.0之前的动画&lt;/h2&gt;
&lt;p&gt;Android动画一直是Android的痛点。Android的动画系统跟iOS系统的动画系统比起来真心差很多，特别是2.3之前。在2.3之前，Android的动画分两种，帧动画和逐渐动画（Tween）.Tween动画包括alpha动画，translate动画，scale动画，rotate动画。这几种动画可以随意组合，产生更复杂的动画。但是我们想要做iOS的frame那样简单的动画，却是没有直接的方法。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;3.0之后的动画&lt;/h2&gt;
&lt;p&gt;在Android3.0版本，终于加入了更多的动画支持，API也更加友好。加入我property动画和value动画，大大增加了动画的灵活性和可定制性。可以通过ObjectAnimator很方便的写出动画代码。像iOS的frame动画，可以通过value动画来实现。还有因为property特性，可以实现一些特别的动画，并且不局限与view，理论上任何object都可以实现property动画。&lt;/p&gt;
&lt;h4&gt;nineOldAnimation&lt;/h4&gt;
&lt;p&gt;这个是向下兼容的Android动画库，使得在3.0之前的系统也可以实现property和value动画。不过这个库早已不维护了，我之前使用发现了一些bug，不过这影响不大。如果要兼容2.3和一下系统，这个是很不错的库。&lt;/p&gt;
&lt;h4&gt;Android4.4和5.0&lt;/h4&gt;
&lt;p&gt;Android4.0之后陆陆续续加了一些动画支持，例如4.1加了对activity的动画支持，4.4加了一些过度动画支持，而最新的5.0加了一个vectorDrawable，可以实现一些高级的向量动画。由于这些API需要较高版本支持，我们开发还不能完全用到，这个我也在研究当中。&lt;/p&gt;
&lt;p&gt;接下来我要讨论的时Activity动画，这个在我们开发中用得比较多，并且做得好的话，可以为应用增添不少分。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Activity动画&lt;/h1&gt;
&lt;p&gt;在Android2.0之后，Activity中加入了一个重要的API  &lt;code&gt;overridePendingTransition&lt;/code&gt;。这个方法在&lt;code&gt;startActivity&lt;/code&gt;方法之后调用的话，可以定义新打开的activity进入动画。例如你想实现像iOS的navigationController的从右往左的push动画，或者ModelViewController的从下往上弹出页面的动画，就可以通过这种方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;                                   &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuyDiamondsActivity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DIAMONDLISTACTION&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PhotoAlbumActivity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BuyDiamondsActivity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;startActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;overridePendingTransition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_left_in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_left_out&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;push_left_in.xml    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;set&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;translate&lt;/span&gt; &lt;span class="na"&gt;android:fromXDelta=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100%p&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:toXDelta=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:duration=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;alpha&lt;/span&gt; &lt;span class="na"&gt;android:fromAlpha=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:toAlpha=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:duration=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/set&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;push_left_out.xml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;set&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;translate&lt;/span&gt; &lt;span class="na"&gt;android:fromXDelta=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:toXDelta=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-40%p&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:duration=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;alpha&lt;/span&gt; &lt;span class="na"&gt;android:fromAlpha=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:toAlpha=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0.6&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:duration=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/set&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样，我们也可以在Activity的finish方法之后，调用&lt;code&gt;overridePendingTransition&lt;/code&gt;来自定义Activity退出动画。这里还有个小tips,如果你要实现A跳转到B，你又没办法改变或定制A如何跳转到B，你可以在B的onCreate方法里，调用父类的onCreate方法之前调用&lt;code&gt;overridePendingTransition&lt;/code&gt;也是有效的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;overridePendingTransition&lt;/code&gt;方法有个缺陷，它只支持XML文件声明的动画，在Android4.1之前（API16）我暂时还没有发现有别的方法可以用代码定义Activity跳转动画。&lt;/p&gt;
&lt;h2&gt;ActivityOptions&lt;/h2&gt;
&lt;p&gt;估计为了弥补&lt;code&gt;overridePendingTransition&lt;/code&gt;方法的不足，Google在Android4.1中加入一个新类ActivityOptions和一个新startActivity(Intent intent, Bundle options)方法。新的startActivity方法可以传入一个Bundle参数，这个Bundle可以包含了一些Activity的动画。这个Bundle数据从何而来，怎么创建，需要包含那些信息，这个你可以不用太过关心，ActivityOptions就是为产生这个Bundle而生的。来看看几个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Custom animations allow us to do things like slide the next activity in as we&lt;/span&gt;
&lt;span class="c1"&gt;// slide this activity out&lt;/span&gt;
&lt;span class="n"&gt;translateButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setOnClickListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnClickListener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Using the AnimatedSubActivity also allows us to animate exiting that&lt;/span&gt;
        &lt;span class="c1"&gt;// activity - see that activity for details&lt;/span&gt;
        &lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="n"&gt;subActivity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WindowAnimations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;AnimatedSubActivity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="c1"&gt;// The enter/exit animations for the two activities are specified by xml resources&lt;/span&gt;
        &lt;span class="n"&gt;Bundle&lt;/span&gt; &lt;span class="n"&gt;translateBundle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                &lt;span class="n"&gt;ActivityOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeCustomAnimation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WindowAnimations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slide_in_left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slide_out_left&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;toBundle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;startActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subActivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;translateBundle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过ActivityOptions.makeCustomAnimation的静态方法可以产生ActivityOptions对象，ActivityOptions有个toBundle的实例方法方便的将你定义的XML动画转化为Bundle数据。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Starting in Jellybean, you can also provide an animation that scales up the new&lt;/span&gt;
&lt;span class="c1"&gt;// activity from a given bitmap, cross-fading between the starting and ending&lt;/span&gt;
&lt;span class="c1"&gt;// representations. Here, we scale up from a thumbnail image of the final sub-activity&lt;/span&gt;
&lt;span class="n"&gt;thumbnail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setOnClickListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnClickListener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;BitmapDrawable&lt;/span&gt; &lt;span class="n"&gt;drawable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BitmapDrawable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;thumbnail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getDrawable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="n"&gt;bm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;drawable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getBitmap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="n"&gt;subActivity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WindowAnimations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AnimatedSubActivity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Bundle&lt;/span&gt; &lt;span class="n"&gt;scaleBundle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ActivityOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeThumbnailScaleUpAnimation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;thumbnail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;toBundle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;startActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subActivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scaleBundle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ActivityOptions.makeThumbnailScaleUpAnimation提供了更高级的功能：将一个缩略图方法的Activity动画。这个有时候挺有用的。ActivityOptions还提供了其他的一些方法，感兴趣的话可以参考它的API。
更多请参考&lt;a href="http://developer.android.com/reference/android/app/ActivityOptions.html"&gt;ActivityOptions API&lt;/a&gt; 和 &lt;a href="https://developer.android.com/training/material/animations.html"&gt;Google官方教程:Defining Custom Animations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下一节我会讲更高级更复杂的一些自定义Activity动画。&lt;/p&gt;</summary><category term="Android"></category></entry><entry><title>技术，社交，生活</title><link href="http://szuwest.github.io/ji-zhu-she-jiao-sheng-huo.html" rel="alternate"></link><updated>2014-10-23T00:00:00+08:00</updated><author><name>West</name></author><id>tag:szuwest.github.io,2014-10-23:ji-zhu-she-jiao-sheng-huo.html</id><summary type="html">&lt;h3&gt;技术不能停&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;最近看了很多其他技术人员的文章，然后我又从iOS转战Android，感觉自己弱爆了，自己的技术跟那些厉害的人根本没得比。有句话说，知道得越多，知道自己不知道越多。现在自己还有冲进，应该尽力学多一点。&lt;/p&gt;
&lt;p&gt;从计算机行业来说，技术千变万化，但是有些东西是基础性的。这些基本功决定你能走多远。算法，数据结构，编译原理，操作系统，这些基本的课程非常重要，而这又恰恰是我的弱项，我吃过这个亏。我想弥补。最近看微博看到&lt;strong&gt;陈皓&lt;/strong&gt;这样的大牛把leetcode的题目刷完了，真是佩服不已。我之前我到上面刷过一下子，但是没有坚持下来。主要是有些还是挺难的，而且英语还是有点吃力。我决定先从基本功开始，进行一个系统的学习。虽然网络上又很多资料，但是网络上的资料都是不系统的，只能参考而已，不能作为学习材料。&lt;/p&gt;
&lt;p&gt;所以我想从纸质书开始，我决定今后尽量少看任何社交软件，还有娱乐视频之类的，多一点时间看书。尽量调好作息时间，利用碎片化时间来学习。&lt;/p&gt;
&lt;h3&gt;关于工作&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;我从开始做C++的SDK，后来加入iOS项目组做iOS开发，再到最近的支持Android开发，大半年时间就变化这么多。项目也都是做到了一半就被停掉。XL公司的基因就是这样，没有办法稳定下来，公司架构频频变动，高管来一批打一炮又走了。项目做了一半又说方向不多，要转变，或者直接停掉。今天饭局上同事说要变革了，采用内部创业形式。我觉得挺好。想在公司内部就是太舒服，而且技术人员和产品经理都没有太多话语权。希望改革后能有所改变。&lt;/p&gt;
&lt;h3&gt;关于理财投资&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;有句话说你不理财，财不理你。自己工作也好几年了，没有什么积蓄。看到很多牛人都有房有车，更有甚的毕业一年就买宝马的年轻人。我也希望能好好理财，好好工作，攒点点把媳妇娶过来，所以前段时间开始买美股，现在是还亏了一点，不过我有信心赚回来。只不过要想挣点钱，还是需要一定的资金，现在自己不敢投太多。一切都可以慢慢来，只要坚持。&lt;/p&gt;</summary><category term="杂谈"></category></entry><entry><title>Good Morning</title><link href="http://szuwest.github.io/good-morning.html" rel="alternate"></link><updated>2014-10-15T00:00:00+08:00</updated><author><name>West</name></author><id>tag:szuwest.github.io,2014-10-15:good-morning.html</id><summary type="html">&lt;p&gt;Hi, good morning. This is from West.&lt;/p&gt;</summary><category term="Test"></category></entry><entry><title>关于程序架构设计</title><link href="http://szuwest.github.io/guan-yu-cheng-xu-jia-gou-she-ji.html" rel="alternate"></link><updated>2014-06-22T00:00:00+08:00</updated><author><name>West</name></author><id>tag:szuwest.github.io,2014-06-22:guan-yu-cheng-xu-jia-gou-she-ji.html</id><summary type="html">&lt;h1&gt;关于程序架构设计&lt;/h1&gt;
&lt;p&gt;最近编程当中，越来越在意程序架构问题，经常纠结怎样才是好的设计，怎样才能将程序解耦，怎样才能写出易扩展，层次分明好维护的程序。可是想来想去也是不能决定怎样做才是最佳。不过最近自己是肯定了一样东西：要想真的做出好的架构，划分好模块是第一次。只要模块划分的清晰，独立和少耦合，后面的事情就好做了。&lt;/p&gt;
&lt;p&gt;这种想法也不单单只有我才有，我现在所在项目负责人在一个程序架构设计的技术讲座上说过这个观点。而我从我们项目的架构也看出他是这样实行的。一般在我们建立项目之初，就先建立好目录结构，而这个目录结构也很讲究，它就直接体现了我们是怎么划分模块和划分层次的。现在我们项目主要分两大块，UI模块和module模块。然后UI目录下就按照功能划分出一个个子目录，对应的再module目录下也是按照功能划分出一个个子目录。这里UI目录下的子目录结构和module目录下的子目录结构基本是一致的。然后在资源文件目录下，也是按照UI子模块那样划分，建立不同的子资源文件。只要划分好了模块，每个模块足够独立的花，每个模块里面是怎么分层，怎么做设计的，对别的模块影响不大。即使这个某个模块做得很烂，到时要重构的也只是那一个模块而已。&lt;/p&gt;
&lt;p&gt;现在我们公司的项目很多模块划分都不是特别好，能够做到像上面那样划分模块和架构的项目估计都是很多。互联网公司人员流动大，三两下就换一拨人，每拨人里面各个技术参差不齐，根本没办法做到很好的架构设计。但是上面这种基础的架构还是可以做的，而且是可以做好的。&lt;/p&gt;
&lt;p&gt;可是光是靠划分模块是做不到一个好的程序架构，而且一个项目有些模块是划分不出来或者跟其他模块联系很多。所以还有其他东西要做。分层就是一个。项目整体可以分层，还有模块里面也可以分层。最经典的分层就是MVC模式。像我们上面的分UI和module就是将项目按MVC分层，V,C分在了UI里，M对应的时module。一般来说，在M之下，还有一层是数据访问层，一般是数据库访问层或者是网络访问层。实际项目都很复杂，各种关联，划分好层次解耦不是件容易的事。还有为了好管理代码和复用，是需要抽出一下共用模块的。例如网络访问的话一般是一个全局共用模块，还有几乎每个移动项目必不可少的图片管理模块等。&lt;/p&gt;
&lt;p&gt;以上说的都是在宏观方面的，真正落实到一行行代码间又有更多要注意的了。这里又有一套编码要遵循规则：API设计，接口设计原则，设计模式等。最近我经常烦的是这个类是不是太大了，要怎么分割才好。这个方法是放在这个类好，还是放在那个类好，还是新建一个类来封装？很多时候我自己都不知道怎样做才是对的，或者说是最好的。我越发觉得自己很弱，很多东西根本无法判断优劣。自己还是太嫩了，代码写的远远不够。每当这个时候我自己就会信心不足。&lt;/p&gt;
&lt;p&gt;唯有多写代码和思考来减少为自己的无知带来的恐惧&lt;/p&gt;</summary><category term="编程感悟"></category></entry><entry><title>swift初探</title><link href="http://szuwest.github.io/swiftchu-tan.html" rel="alternate"></link><updated>2014-06-22T00:00:00+08:00</updated><author><name>West</name></author><id>tag:szuwest.github.io,2014-06-22:swiftchu-tan.html</id><summary type="html">&lt;h1&gt;swift初探&lt;/h1&gt;
&lt;p&gt;自从swift公布以来，火得不得了。如果你是开发者，还没有看过swift，那还真是out了（不过话说回来，并不是没有看过swift就不是好开发者。好的程序员跟看没看过某种语言没有什么关系）。我从公布以来就断断续续的看，一直在看官方的英文文档。偶尔也看看别人写的或者翻译的文章。现在虽然没有把官方文档看完，但是也看了大部分，可以写写感想心得。&lt;/p&gt;
&lt;p&gt;简单来说，swift是集合了许多脚本语言的特性而又不像其他一般的脚本语言的苹果新生代开发语言。swift集合了很多语言的特性，如ruby，object-c，c++，c#等，其中长得最像的应该是ruby。咋看之下swift就想ruby一样的脚本语言。完全面向对象，类型定义，closure特性，函数式编程等等。不过据官方文档介绍，swift语言不是解释型语言，它最终会编译成二进制代码，并且它的运行效率比object-c要快。说比object-C要快我是比较怀疑的，而外国开发者进行了测试，得出结论是如果不强加一些编译优化的话，是快不过objC的。&lt;/p&gt;
&lt;p&gt;如果对ruby，Object-C，c++语言熟悉的话，学起swift来应该没有什么难度。但是它还有很多语法特性是别的语言没有的，并且有些在我看来有点奇怪的特性。不过这是都没有什么，说明自己见识少，熟悉了就好了。首先一个比较特别的是，你不在需要在每行代码结束时加上分号，直接回车换行就行。当然，如果你一行有多句代码，每一句的末尾还是要加分号的。然后另外一个我自己不太适应的是if语句的判断表达式不再需要用括号括起来，我自己感觉很别扭。当然，也还有别的语法，不同，例如函数的定义用func，返回值的表示用"-&gt;".Object-C那种方法调用方式不再有，所有的都是用.来访问和调用。我觉得swift基本上对所有的一些语法特性都是借鉴其他语言一些优秀特性，并且加入了自己特有的方式，形成swift自己独特的语法。比如说函数的形式参数，像c++一样是用括号括起来，可以有默认值，并且可以有外部标签，就是像Object-C一样对每个参数加个标签标明它的意义。还有不知道是否是独创的通过tuple支持多返回值。还有对闭包的支持。我自己的理解是Object-C的block也属于闭包，但是它语法是类C的，swift的closure是纯正的闭包特性，而且可以简化到令人发指的地步。&lt;/p&gt;
&lt;p&gt;swift可以说是很多语言的集大成者，并且超越它所借鉴的那些语言。也是这是苹果要取代Object-C的原因。我以前很喜欢Object-C，现在也喜欢，只是swift出来之后就没那么喜欢了。因为我看到了一个更好的语言。我本身java写得最多，开始是对c++的怕和恨，到对java的喜欢，再到对它的厌倦，然后发现Object-C的不错进而对它喜爱。而现在我要跨越它，进入swift的领地。&lt;/p&gt;
&lt;p&gt;未完待续...&lt;/p&gt;</summary><category term="swift"></category></entry><entry><title>Hello world</title><link href="http://szuwest.github.io/hello-world.html" rel="alternate"></link><updated>2014-06-10T00:00:00+08:00</updated><author><name>West</name></author><id>tag:szuwest.github.io,2014-06-10:hello-world.html</id><summary type="html">&lt;h1&gt;Hello World&lt;/h1&gt;
&lt;p&gt;Hello, world. This is first test.&lt;/p&gt;</summary><category term="Test"></category></entry></feed>