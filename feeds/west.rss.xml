<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>West's blog</title><link>http://szuwest.github.io/</link><description></description><atom:link href="http://szuwest.github.io/feeds/west.rss.xml" rel="self"></atom:link><lastBuildDate>Sat, 17 Dec 2016 00:00:00 +0800</lastBuildDate><item><title>2016年总结</title><link>http://szuwest.github.io/2016nian-zong-jie.html</link><description>&lt;h2&gt;2016年总结&lt;/h2&gt;
&lt;h3&gt;生活&lt;/h3&gt;
&lt;p&gt;今年最大的事情应该是领证结婚了，虽然暂时没有摆酒，但是拍婚纱照，度蜜月这些都做了。房子还没买，一直纠结在深圳买还是东莞买，但是最大的问题还是没有钱。房子是个大问题，我们这一代很多人都基本被房子给绑死了。这也许是我们这代人的悲哀。&lt;/p&gt;
&lt;p&gt;人结婚以后心态变了很多，很多事情不能只想自己，也不能想眼前。很多不好的习惯（例如晚睡），不成熟的想法都得摒弃。考虑更多的是家庭，老婆。今年的开销也变得大很多，挣钱的压力也大。婚姻是两个家庭的事情，不只是两个人的事情，这个结婚后就很明显了。我的家庭并不是很好，并且我妈那个病是个负担，每到年底就会发作，这对我和我老婆影响很大，对我们整个家庭都影响很大。可这就是我的家庭，必须得面对，还要安抚我老婆的情绪，我也得担起这个责任。这就是生活。&lt;/p&gt;
&lt;h3&gt;工作&lt;/h3&gt;
&lt;p&gt;这一年的工作并不顺利，可以说比较失败。下半年有尝试看外面的一些机会，但是一直不顺利，没有拿到好的结果。这一度让我很焦虑。这也让我认识到自己的不足。&lt;/p&gt;
&lt;p&gt;一年来，项目很不顺利。下半年，来了新老板，然后把我们老大给挤走了，虽然最终他还是留在XL，但是已经跟我们的项目没关系了。他一手拉扯大的孩子这样就被放手了。这些对我们底层的员工来说，也没有太大影响，我们也改变不了任何东西。不过原来的老大走了对我的影响比较大，因为他算是我的伯乐，我个人也比较喜欢他，希望能跟他一起共事，做一个好产品。他走后，部门招了很多新人，然后工作很组织关系很混乱。我也没有再被新领导重视，我也没有太多表现的机会。iOS的主管本身就是一个混日子的人，这样让我自己很不爽，但是我也没有办法，所以有段时间想离开，但是没有好机会。&lt;/p&gt;
&lt;p&gt;现在我们要搬离母公司，去进入一个子公司。这也许是个新机会，谁知道。一开始我自己很不愿意，因为福利差了。现在我想这或许是个机会，变化也许是好的，不能再像这样。如果有机会离开分配到别的项目也不错，新的开始。&lt;/p&gt;
&lt;p&gt;这一年技术没有太多长进，主要是项目一直在变动，下半年写代码没那么多了。不过我趁年底这几个月的空闲我也补了一些，解决以前一些以前没解决好的难题。不过我自己思想也成熟稳定了一些，所以我接下来应该要好好做事，并且坚持学习一些新知识，补自己的一些短板，好好提高自己。&lt;/p&gt;
&lt;h3&gt;投资&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;摒弃突然暴富，投机取巧的幻想。踏实只做自己能力圈内的事，赚自己能赚的钱。这是我一年的来的心得。一年来，A股今年终于把以前的亏损慢慢补回来了。港股还是亏损状态，而且还不知道什么时候会好转。美股终于有找到一点点感觉，开始又回到了起跑线。另外得益于人民币贬值，港元和美元相对升值，所以我的外币资产也算减少亏损。&lt;/p&gt;
&lt;p&gt;想想这两年，炒股也算达到最初的学习的目的了。唯一还比较遗憾的是港股还有亏损。我算真正体味到为什么炒股并不是真的适合每个人，而且觉大部分人很会亏钱。不过经过这些经历，我想我应该比较难亏钱了，自己还是有一点信心。这两年炒股多多少少确实对我的工作还是造成了一点影响，因为工作中还是忍不住看盘，还是股市波动的时候还是有一点影响。不过现在影响已经很小很小了。我觉得还是有必要做一点投资，长远来看。投资也开阔了自己的眼界，原来资本市场是这样的，也在雪球上学到很多东西，了解到一些社会投资精英的生活，这也算是一种收获。我只希望以后能不亏损和保持一定的年收益率就行了。我也相信这个以后一定能实现。我自己的主要精力还是放到工作上，还有我自己对实业更感兴趣，以后也不会走上职业投资的道路。&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;回想这一年，上半年的事情已经不太记得了。看到别的朋友今年都有很大进步和改善，看看自己最近时间面试受到的挫折，感觉自己跟他们的差距越来越远了。他们的道路走得很顺，而自己却没有多大长进。这也许有很多原因，人家的起步就比自己好很多，人家也付出了很多，现在才走得这么好。别人再好也是别人的，你不知道别人付出了多少，羡慕没什么用。所以最重要的是自己扎扎实实做好自己该做的事。我也不会认输，人生很长，我们不能那么短视。就算不能比别人好，也要做自己，活出自己的精彩，活出自己的人生。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 17 Dec 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-12-17:2016nian-zong-jie.html</guid><category>总结</category></item><item><title>iOS后台下载和断点续传</title><link>http://szuwest.github.io/ioshou-tai-xia-zai-he-duan-dian-xu-chuan.html</link><description>&lt;h2&gt;iOS后台下载和断点续传&lt;/h2&gt;
&lt;p&gt;最近在重新整理我们项目里的iOS的后台下载，因为原来方法（ASIHTTPRequest方式）无法做到后台一直下载，这个问题被我老婆吐槽了好几次。所以我重新整理一下，用NSURLSession来下载，达到了比较好的效果。现在总结自己的一些经验。&lt;/p&gt;
&lt;h3&gt;背景&lt;/h3&gt;
&lt;p&gt;项目最开始我们是用了NSURLSession来做后台下载的。但是有两个严重的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有时候偶现的不能下载，就是一启动下载就失败。一旦出现这种情况，无法恢复，怎么样都无法下载，所有任务都一样&lt;/li&gt;
&lt;li&gt;下载速度很慢，只有几十到几百KB/S，网络正常，Android端同一个文件下载速度飞快&lt;/li&gt;
&lt;li&gt;程序杀掉之后无法重新继续下载&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按道理这些问题都不应该出现，可是我们的应用就是出现了这些问题，而且难以调试，同事调试了很久都没有结果。最后我也没认真研究，但是我发现ASIHTTPRequest可以很好地解决上面的几个问题，然后我就在原来的基础上加了ASIHTTPRequest的下载方式。&lt;/p&gt;
&lt;p&gt;ASIHTTPRequest方式的下载不错，速度很快，也能很好的断点续传，但是跟Android的还是慢了一点，不过我觉得这可能是系统不同的原因。ASIHTTPRequest还有一个比较致命的弱点，就是不能后台下载，这对于下载大文件来说是必须的。在iOS平台要做后台下载，最好的方式还是使用NSURLSession。&lt;/p&gt;
&lt;p&gt;所以我决定好好研究一下NSURLSession，并且改用这种方式。&lt;/p&gt;
&lt;h3&gt;NSURLSession后台下载&lt;/h3&gt;
&lt;p&gt;实际上NSURLSession的后台下载真的很强大，苹果真做了件很好的事。当你创建一个后台下载任务的时候，实际上你就把这个下载交给系统来接管了。所以即使你把APP杀掉，下载也不会停止，很牛逼。而且如果出现手机网络变化之类的，系统会在后台帮你重试，当网络又正常了它会继续下载。所有估计一旦你启动了后台下载任务，要么下载完，要么你手动取消，要么服务器那边出错，不然这个下载不会停止。&lt;/p&gt;
&lt;p&gt;虽然NSURLSession那么强，但是要做一个体验比较好的下载器还需要注意很多地方。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;必须是支持后台下载的NSURLSessionConfiguration&lt;/li&gt;
&lt;li&gt;必须用这个 (NSURLSession &lt;em&gt;)sessionWithConfiguration:(NSURLSessionConfiguration &lt;/em&gt;)configuration delegate:(nullable id &lt;NSURLSessionDelegate&gt;)delegate delegateQueue:(nullable NSOperationQueue *)queue来创建NSURLSession，并且delegate不能为空。NSURLSession最好全局唯一&lt;/li&gt;
&lt;li&gt;必须实现delegate几个重要的方法&lt;/li&gt;
&lt;li&gt;最好实现 APPDelegate中的- (void)application:(UIApplication &lt;em&gt;)application handleEventsForBackgroundURLSession:(NSString &lt;/em&gt;)identifier completionHandler:(void (^)())completionHandler方法，并且把completionHandler保存起来适时调用&lt;/li&gt;
&lt;li&gt;在手动暂停或者失败后，要把resumeData保存起来，最好是保存的本地，重新启动下载是需要这个来继续下载&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;还有需要注意的是 在 - (void)URLSession:(NSURLSession &lt;em&gt;)session
      downloadTask:(NSURLSessionDownloadTask &lt;/em&gt;)downloadTask
didFinishDownloadingToURL:(NSURL *)location 这个回调方法里，必须location指向的临时文件移动到你的沙盒目录中，因为这个方法一旦返回后，就会去删除这个临时文件。&lt;/p&gt;
&lt;p&gt;根据上面这些，我自己做了一个下载任务管理器，可以创建多个任务，并可以配置多个任务并行下载。当一个下载任务完成后便会启动下一个等待中的任务。这样的话，你就可以创建完下载任务后，就关闭程序，该干啥就干啥去。下载完了它会发本地通知。&lt;/p&gt;
&lt;p&gt;不过这个下载器在公司的项目里用，牵涉比较多，还支持ASIHTTPRequest下载，所以暂时没法开源。不过有一个demo包含了核心的思想。&lt;/p&gt;
&lt;p&gt;demo在这里 &lt;a href="https://github.com/szuwest/BackgroundDownloadDemo"&gt;BackgroundDownloadDemo&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;参考资料：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;1.&lt;a href="https://onevcat.com/2013/08/ios7-background-multitask/"&gt;WWDC 2013 Session笔记 - iOS7中的多任务&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;a href="http://www.jianshu.com/p/b4edfa0b71d8#"&gt;基于iOS 10、realm封装的下载器（支持存储读取、断点续传、后台下载、杀死APP重启后的断点续传等功能）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;a href="http://www.jianshu.com/p/1211cf99dfc3"&gt;iOS使用NSURLSession进行下载（包括后台下载，断点下载）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Thu, 08 Dec 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-12-08:ioshou-tai-xia-zai-he-duan-dian-xu-chuan.html</guid><category>NSURLSession ASIHTTPRequest 后台下载</category></item><item><title>事件循环机制之于Android的Looper和iOS的NSRunLoop</title><link>http://szuwest.github.io/shi-jian-xun-huan-ji-zhi-zhi-yu-androidde-looperhe-iosde-nsrunloop.html</link><description>&lt;h2&gt;事件循环机制之于Android的Looper和iOS的NSRunLoop&lt;/h2&gt;
&lt;p&gt;Android和iOS同为手机操作系统，有很多相同之处。有很多设计几乎是一样的，统一种设计模式，不同的实现。例如事件模型，它大体逻辑是这样的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_next_message&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;process_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于这样的一种模式, Android系统和iOS系统是一样的，只不过是不同的平台不同的实现方式。应该说很多平台或者框架都是采用这一种模式。Android系统对应的就是Looper机制，iOS对应的就是NSRunLoop机制。你看名字都是loop，这是它的核心。&lt;/p&gt;
&lt;p&gt;对于移动开发者来说，理解平台是怎么实现这个事件循环机制，或者叫消息机制，是很重要的。因为在你的开发工作当中，无时无刻不在用着这种机制。不理解它的机制，充其量也只能算个初级程序员，无法深入理解系统。如果我们能了解不同平台对这一机制的实现，可以加深理解，可以提高自己。我既做过Android开发，也研究过它Looper机制。现在做iOS开发都有一段时间了，最近开研究它的NSRunLoop机制。我发现他们整体的设计思想确实一致的，但是不同的平台却也有很多差异性。&lt;/p&gt;
&lt;h2&gt;共同的设计点&lt;/h2&gt;
&lt;p&gt;首先loop跟线程是一一对应的，这是基础。然后iOS或者Android都是一个应用一个进程（并非绝对），然后进程里有一个主线程。然后这个主线会绑定一个loop。这工作是有系统来完成的。这个loop一直在接收者系统的一些事件，或者用户产生的事件。如果没有事件或者处理完了事件，它就在等待中，等待别事件来临唤醒它处理。不管Android还是iOS，它们的更新界面操作必须在主线程中进行。所以我们在写代码的时候经常会出现将消息抛到主线程中来执行。&lt;/p&gt;
&lt;p&gt;对于子线程，它默认是没有loop的，当它执行完它的任务后，线程就结束了。这也符合我们大多数的场景。如果我们要让子线程也绑定一个loop呢？或者说我们什么情况下需要子线程运行一个loop。我们大部分情况其实都不需要额外创建一个loop，因为没有用到，所以很多人就不去了解。这也是不行的。对于有周期性人任务的情况，用loop是很好的选择。例如我们需要一个后台线程一直运行，然后我们会定期或不定期给它发送一些任务，用loop来实现时比较好的。&lt;/p&gt;
&lt;p&gt;线程默认没有loop，而且loop不能程序员自己手动调用构造函数创建，需要调用系统获取loop的方法。系统会把创建的loop跟当前的线程绑定在一起，存在一个全局的key-value的字典里，下次再获取当前线程的loop，就直接取出来用。&lt;/p&gt;
&lt;p&gt;获取到loop后，我们让它进入事件循环，即执行类似上面的loop()方法，这是一个死循环，除非外部停止掉这个循环。这个循环里面有一个重要的点，就是没有消息的时候，它是进入睡眠等待状态，有消息来时候，会把它唤醒并执行消息处理。这个消息循环机制Android和iOS的实现差别还是挺大的。下面我们说一下，如何建立一个loop循环，然后如何给它发消息和一些需要注意的东西&lt;/p&gt;
&lt;h2&gt;iOS的NSRunLoop&lt;/h2&gt;
&lt;p&gt;首先来看一下如何在iOS中创建一个loop并让它跑起来&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c1"&gt;//创建并启动Thread&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testThread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSThread&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;initWithTarget&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onTestRunLoop&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testThread&lt;/span&gt; &lt;span class="n"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;TestRunLoop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testThread&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;//Thread的入口方法&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;onTestRunLoop:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;--%@--&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSThread&lt;/span&gt; &lt;span class="n"&gt;currentThread&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSRunLoop&lt;/span&gt; &lt;span class="n"&gt;currentRunLoop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;addPort&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSMachPort&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;forMode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;NSDefaultRunLoopMode&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;***%@***&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="n"&gt;NSRunLoop&lt;/span&gt; &lt;span class="n"&gt;currentRunLoop&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSRunLoop&lt;/span&gt; &lt;span class="n"&gt;currentRunLoop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;mode和source&lt;/h4&gt;
&lt;p&gt;上面最主要的代码是&lt;strong&gt;[[NSRunLoop currentRunLoop] addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode]&lt;/strong&gt; 和 &lt;strong&gt;[[NSRunLoop currentRunLoop] run]&lt;/strong&gt;，currentRunLoop这个方法会检查当前线程有没有loop，没有的话，就会自动创建。NSMachPort是一个事件源source，NSDefaultRunLoopMode代表一个模式Mode。当把source和Mode都设置之后，开始调用run方法，进入循环。&lt;/p&gt;
&lt;p&gt;这里mode和source是必须的，否则NSRunLoop跑不起来。NSRunLoop必须运行在某一种mode中，mode可以切换，切换之前就会把之前的mode停掉。iOS系统定义了好几种mode，这个是它跟Android一个重要的不同点，可以说这个设计让它的效率比较高。例如主线程中，列表滑动的时候，NSRunLoop切换到TrackingRunLoopMode下，之前运行mode的source就停掉。这样里列表滑动起来就会很流畅。至于source，Port只是它的一种，属于Input Source，还有NSTimer也是source，属于Timer Source.&lt;/p&gt;
&lt;h4&gt;observer和autoreleasepool&lt;/h4&gt;
&lt;p&gt;除了source，还有一个observer机制，这是iOS的特色，Android的loop机制中没有这些。iOS系统在loop循环中定义了一些重要的事件，然后你可以监听这些相关事件。例如即将进入Loop，即将处理 Source，即将进入休眠，刚从休眠中唤醒 这些事件都会通知到相关的观察者。这个机制我们开发者很少用到，但是在iOS系统中却很重要。其中一个就是AutoReleasePool机制。&lt;/p&gt;
&lt;p&gt;我相信不少人在面试时会被问到NSRunLoop跟AutoReleasePool有什么关系，AutoReleasePool什么时候释放池里面的对象。我们第一反应很容易就认为是@autoreleasepool{}方法块执行之后。回答这个问题之前我们先看看别的。我们知道在iOS的main.m文件里一般是这样的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;autoreleasepool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;UIApplicationMain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSStringFromClass&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;AppDelegate&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;AutoReleasePool包含了UIApplicationMain()方法，UIApplicationMain()方法里建立了main runloop,然后一直在那里循环处理消息或者等待，如果你再该方法之后再加一些语句，是没有办法执行的。按照之前的说法，那岂不是AutoReleasePool一直不会释放它里面的对象？显然这是错的。但是要理解AutoReleasePool什么时候释放它里面的对象，还是需要先了解一下AutoReleasePool的实现机制。AutoReleasePool实际上是有AutoReleasePage来实现的，而AutoReleasePage有点类似于堆栈，有一个push和pop操作。苹果在主线程的runloop监听了几个事件，分别是即将进入Loop，准备进入休眠和即将退出Loop，在即将进入Loop时进行push一个哨兵对象（或者叫边界对象），在即将休眠时是pop哨兵对象操作，然后再次push操作，在即将退出Loop时pop操作。在push哨兵对象之后，程序运行会push很对autorelease对象到AutoReleasePage中，pop操作就把这些对象释放，一直找到哨兵对象也把它pop掉为止。&lt;/p&gt;
&lt;p&gt;所以每次runLoop进入休眠前AutoReleasePool就释放一次。AutoReleasePool堆栈式结构让它可以嵌套，互不影响。更新详细的AutoReleasePool资料可以查看最后的参考资料&lt;/p&gt;
&lt;h4&gt;给RunLoop发消息&lt;/h4&gt;
&lt;p&gt;建立了一个runloop，给它发消息做任务才是我们的目的所在。怎么在别的线程给我们建立的runloop发消息呢？最直接的方法是通过performSelector:onThread:withObject:waitUntilDone:方法.这个是NSObject的方法。这个方式需要持有Thread对象。当然也可以同RunLoop添加Port或者Timer的方式，然后持有Port或者Timer，这个种方式不是那么直接。如果需要跨进程发送消息，则需要Port，但除了系统间的进程，跨进程通信并不常用。&lt;/p&gt;
&lt;p&gt;现实的编程工作中，更常用的是往主线程的RunLoop发送消息。iOS系统提供了很多方式很方便我们操作。例如NSObject中就有performSelectorOnMainThread:withObject:waitUntilDone:方法，就是往MainRunLoop里发消息。还有dispatch_(a)syn(dispatch_get_main_queue(),block) GCD方法也是。同时还有很方便的获取mainThread和mainRunLoop的方法。&lt;/p&gt;
&lt;h4&gt;退出机制&lt;/h4&gt;
&lt;p&gt;runloop什么时候退出呢？从API文档来看，苹果貌似没有提供主动停止runloop的接口，但是在run的时候可以指定超时时间（runUntilDate: 和 runMode:beforeDate）。从底层代码来看，外部是可以主动调用停止的，然后还有就是没有source/timer/observer的话，runloop也会退出。&lt;/p&gt;
&lt;h4&gt;总结&lt;/h4&gt;
&lt;p&gt;NSRunLoop总体来说不简单，并且平时不太会用到。很多东西还是不太好理解。mode如何切换的？在一个线程中通过performSelector:onThread:withObject:waitUntilDone:向另外一个线程的runloop发送消息，是怎么发送过去的？还有source里又分很多种，observer在系统中还有那些应用等，还有很多东西可以挖掘。NSRunLoop 是基于 CFRunLoopRef 的封装，而CFRunLoopRef是开源的，最好的研究方式还是去阅读&lt;a href="https://opensource.apple.com/source/CF/CF-855.17/CFRunLoop.c"&gt;源码&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;参考资料&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://blog.ibireme.com/2015/05/18/runloop/"&gt;深入理解RunLoop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[&lt;a href="http://www.jianshu.com/p/c0a550d2ac97"&gt;RunLoop已入门？不来应用一下？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.jianshu.com/p/929d855c5a5a"&gt;iOS runloop 学习笔记(二)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/"&gt;黑幕背后的Autorelease&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Android的Looper&lt;/h2&gt;
&lt;p&gt;跟iOS不同，Android的源码是开发的，你可以很方便的看到Looper的源码。实际上大家研究Looper机制都是阅读源码的。整体来讲，我觉得Android的事件循环机制比较简洁明了。我们看一下Android如何创建一个Looper并让它跑起来&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;LooperThread&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="n"&gt;mHandler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="n"&gt;Looper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prepare&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

       &lt;span class="n"&gt;mHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;handleMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="c1"&gt;// process incoming messages here&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="p"&gt;};&lt;/span&gt;
       &lt;span class="n"&gt;Looper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最主要的代码是&lt;strong&gt;Looper.prepare()&lt;/strong&gt; 和 &lt;strong&gt;Looper.loop()&lt;/strong&gt;，前一句的意思是创建一个Looper,并且将这个Looper和Thread存储到一个静态ThreadLocal变量中。注意如果当前线程已有Looper它会抛异常。后一句代码的作用就是进入一个死循环，不断的从MessageQueue中取出Message，然后拿到Handler，执行它的dispatchMessage方法。&lt;/p&gt;
&lt;h4&gt;Looper，MessageQueue，Handler，Message&lt;/h4&gt;
&lt;p&gt;消息循环机制里最重要的是Looper和MessageQueue。看源代码就可以知道，MessageQueue是作为Looper的一个成员变量而存在，当Looper实例化的时候，它也被初始化，并且当前的Thread对象也当做成员变量存起来。Looper.loop()方法很简单，核心代码就那么几句:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// might block&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// No message indicates that the message queue is quitting.&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatchMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;......&lt;/span&gt;
   &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recycleUnchecked&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以Looper做的工作就是不断从MessageQueue总取出消息，然后调用Message的target，即Handler来处理（dispatchMessage）消息。取消息的时候，即queue.next()方法，如果当前queue里没有消息，它会在这里休眠等待，知道有消息过来。如果消息为空，就跳出循环返回了。重点在于MessageQueue，看它如何将消息发过来，又如何实现取消息的。&lt;/p&gt;
&lt;h4&gt;用Handler给Looper发消息&lt;/h4&gt;
&lt;p&gt;下面是通过mHandler给Looper发消息，mHandler是上面再LooperThread的run方法里创建的，并且实现了Handler的handleMessage方法。注意mHandler是通过没有参数的构造函数创建的，这样的话它会获取当前线程的Looper和Looper的MessageQueue当做成员变量保存起来。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//发送消息&lt;/span&gt;
&lt;span class="n"&gt;mHandler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obtain&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="n"&gt;mHandler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//TODO&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以给Handler发送Message或post一个Runable，我们也可以通过sendMessageDelayed方法发送延时消息，即指定消息多久后才执行。所有通过sendMessage或者它的重载方法发送的Message，最终都被传到上面的handleMessage中来处理。这样说来，Handler既是消息的发送者，也是消息的处理者，这样看起来好奇怪没有必要的样子。实际上不奇怪，你现在发出的消息，要下一个事件循环才会处理到，所以它的执行异步的。另外消息的执行是在Handler所绑定的那个Looper所在的线程，我们经常做的就是在子线程中调用在主线程Handler发送消息，这样就做到的线程切换。&lt;/p&gt;
&lt;h4&gt;Message&lt;/h4&gt;
&lt;p&gt;很早之前我想过一个问题，就是一个线程中我们可以创建多个Handler，每个Handler都有的它的handleMessage方法，我们怎么保证某个handler发消息不会发到别的handler的handleMessage中呢。看了源代码后发现这个问题很简单：每个Message发送出去前，会将发送它的那个Handler保存到一个叫target参数中，Looper中就使用这个target来处理消息。但是这个target参数向开发者隐藏的，我们不看源代码不知道它的存在。Message类中还有好几个这样的参数。例如我们通过Handler的post的Runable最终是封装在Message的callback参数中，还有一个when参数表明每个消息的执行时间，还有一个Bundle类型的data数据，还有一个next参数。没错，Message其实是一个单链表的节点数据结构，这一点的使用体现MessageQueue中，MessageQueue本身没有再实现队列，是借助Message是实现的。还有Message中还有一个消息缓存池，这就是大家都推崇使用Message.obtain()来获取消息的原因。还有Message中还有一个Messenger类型的参数replayTo，这个参数用来跨进程通信的,在Handler中实现了这个机制。所以Message和Handler还真是有不少东西，要了解更多请看源代码或者后面的参考资料。&lt;/p&gt;
&lt;h4&gt;MessageQueue和垃圾回收&lt;/h4&gt;
&lt;p&gt;MessageQueue算是这个机制的核心，因为消息都是通过它的enqueueMessage传进来，通过它的next方法取消息或者block等待。他还包含了一些native方法，这些方法就是对应了c++层的Looper,MessageQueue，这又是一个很深的知识点了。&lt;/p&gt;
&lt;p&gt;enqueueMessage方法不算复杂，主要是对Message参数检查和加入队列，最终调用nativeWake方法，通知底层列表有变化。而next方法，则比较复杂，它有一个for死循环，并调用了nativePollOnce方法进行阻塞等待。当被唤醒之后，它从队列里找消息，找到了需要处理的消息就返回，没有找到的话，处理IdleHandler，处理完进行下一次循环。这里的IdleHandler很有意思，我开始不知道是啥，后来看到资料说我们的主线程ActivityThread就实现了IdleHandler，在里面做垃圾回收工作。这恰恰是跟iOS的RunLoop里面的Observer机制一样。都是在进行两次休眠之前进行一次垃圾回收，真是异曲同工啊！&lt;/p&gt;
&lt;h4&gt;总结&lt;/h4&gt;
&lt;p&gt;Android的Looper机制说简单简单，说复杂复杂，但是好处是我们可以看到所有源码。我这里只讨论了上层我们常用的接口和机制，实际上有很多东西还值得我们研究。例如MessageQueue还可以放Barrier, MessageQueue相关的native方法涉及到的C++层的Looper机制，Handler和Messager是如何实现跨进程通信的，这些都是很高级的知识，以后有机会研究研究。&lt;/p&gt;
&lt;h4&gt;参考资料&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://my.oschina.net/youranhongcha/blog/492591"&gt;聊一聊Android的消息机制&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/angeldevil/p/3340644.html"&gt;Android消息处理机制(Handler、Looper、MessageQueue与Message)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/lmj623565791/article/details/47017485"&gt; Android 基于Message的进程间通信 Messenger完全解析&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;iOS和Android同为当今最流行的移动操作系统，在很多系统设计方面都是非常像。或许说他们彼此借鉴，技术本来就是这样样子。消息循环机制本来就是一种设计模式，只是Android和iOS根据自己的平台做了一套实现。通过对比学习，自己收获很多，但是我也感觉自己还不够深入，现在只是学到点皮毛而已。继续努力。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 04 Dec 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-12-04:shi-jian-xun-huan-ji-zhi-zhi-yu-androidde-looperhe-iosde-nsrunloop.html</guid><category>Android iOS Looper NSRunLoop</category></item><item><title>iOS直接上传系统照片和视频（ALAsset）</title><link>http://szuwest.github.io/ioszhi-jie-shang-chuan-xi-tong-zhao-pian-he-shi-pin-alasset.html</link><description>&lt;h2&gt;iOS直接上传系统照片和视频（ALAsset）&lt;/h2&gt;
&lt;p&gt;我之前有一篇文章里讲过上传系统照片和视频的事（&lt;a href="http://szuwest.github.io/iosxi-tong-xiang-ce-shang-chuan-bu-de-bu-shuo-de-na-xie-shi-er.html"&gt;iOS系统相册上传不得不说的那些事儿&lt;/a&gt;），需要将ALAsset从系统相册里导出到沙盒文件里，然后再将这个文件上传。这里需要无端端写一次文件的时间就不说了，最要命的是还要占据额外的磁盘空间。我们的用户一般要备份相片视频的时候，往往是手机空间不足的时候。这个时候存储空间很紧张，你备份还需要额外的空间。如果一个视频很大，例如2G，那么手机上需要有空闲的2G空间才能导出视频，才能备份。真是硬伤。&lt;/p&gt;
&lt;p&gt;这个问题一直在我心头，卡了我很久，之前我有网上找解决方法，没有找到，很多都是说将ALAsset导出文件到沙盒的事。我自己也有想过要怎么解决。我想过从ALAsset中读取一段一段的NSData数据，然后分别将这些数据上传。这样也许是可以的，但貌似需要服务器那边能将这些包组合起来。另外客户端这些做起来也挺复杂。还有一种方法是我不使用AFN库，自己直接用NSURLConnection来写，跟服务器建立连接后不断的从ALAsset中读取数据写入跟服务器建立的连接。这个是参考Java的写法。可是我又不知从何动手。并且之前都很忙，没有时间想这么多。&lt;/p&gt;
&lt;p&gt;最近我比较闲了，我想正好有时间来解决这个问题。这是我心中的一块石头，我要把它拿掉。&lt;/p&gt;
&lt;p&gt;这次我直接在github上找，说不定能找到一些有用的代码。果真让我找到了 &lt;a href="https://github.com/formal-method/FMAssetStream"&gt;FMAssetStream&lt;/a&gt;这个库,这个库的做法很简单，定义了一个子类来扩展&lt;strong&gt;NSInputStream&lt;/strong&gt;，重载了一个最重要的方法 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="n"&gt;maxLength&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSUInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;NSUInteger&lt;/span&gt; &lt;span class="n"&gt;bytesRead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assetRepresentation&lt;/span&gt; &lt;span class="n"&gt;getBytes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="n"&gt;fromOffset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;bytesRead&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Update stream status when it&amp;#39;s consumed&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;streamStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NSStreamStatusAtEnd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;progressDelegate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;progressDelegate&lt;/span&gt; &lt;span class="n"&gt;progressBytes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;totalBytes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bytesRead&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个方法做的事情很简单，就是读取一定长度的数据到buffer里。而这个buffer里数据就是上传文件的时候一次读取并写入的数据。&lt;strong&gt;我怎么就没有想到扩展NSInputStream类这种做法呢&lt;/strong&gt;，我心里大骂自己，这很自然的一种做法呀，理应就该这么做的。上传文件一般都是用流，文件流是系统提供的，但是我们自己也可以扩展它来处理特别的情况呀。而且我看过AFN库的源代码，它也是扩展了NSInputStream来做多部分数据上传。&lt;/p&gt;
&lt;p&gt;知道了扩展NSInputStream来从ALAsset中读取数据，还有一个问题需要注意，就是断点续传。关于断点续传我也写过一篇文章&lt;a href="http://szuwest.github.io/iosshang-chuan-wen-jian-zhi-chi-duan-dian-xu-chuan.html"&gt;iOS上传文件支持断点续传&lt;/a&gt;。然而FMAssetStream这个库写得很简单，没有支持断点续传，它也没有集成AFN。我想应该也有人做过这些事情，如果没有，那再自己写。&lt;/p&gt;
&lt;p&gt;果然我找到一个更加完善的库&lt;a href="https://github.com/pavelosipov/POSInputStreamLibrary"&gt;POSInputStreamLibrary&lt;/a&gt;，这个库既支持了断点续传，而且还可以很方便的跟AFN一起结合使用。这正是我要找的库，并且这个库更加完善和可配置，代码也写得很好。&lt;/p&gt;
&lt;p&gt;我最终使用了这个库，改完相关代码之后，上传文件起来飞快。感谢这个库的作者。我心中的横了很久的一块石头终于落地。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Thu, 01 Dec 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-12-01:ioszhi-jie-shang-chuan-xi-tong-zhao-pian-he-shi-pin-alasset.html</guid><category>上传 ALAsset NSInputStream</category></item><item><title>iOS应用2017年强制应用HTTPS问题</title><link>http://szuwest.github.io/iosying-yong-2017nian-qiang-zhi-ying-yong-httpswen-ti.html</link><description>&lt;h2&gt;iOS应用2017年使用HTTPS问题&lt;/h2&gt;
&lt;p&gt;昨天一个朋友发了一篇介绍HTTPS方案文章给我看，文章提到2017年苹果强制所有APP使用HTTPS协议，问我是不是真的，还是说那只是一篇软文。他也很担心，因为他的APP不是使用HTTPS协议。&lt;/p&gt;
&lt;p&gt;其实应该说是这样：从2017年1月1日起，苹果强制&lt;strong&gt;新提交&lt;/strong&gt;的APP使用HTTPS协议。这里要强调&lt;strong&gt;新提交&lt;/strong&gt;，也就是说已经上线了的APP不受影响，新提交的APP或新版本提交才受影响。虽说强制，但是还是有方法不使用HTTPS协议的。&lt;/p&gt;
&lt;p&gt;我查了下，现在的资料有提到3种方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1是APP里有一个配置开关NSAllowsArbitraryLoads，打开这个开关，所有网络请求都可以使用HTTP。现在所有没有用HTTPS协议的都是这么干的。这个开关现在用是没有问题的，但是2017年后苹果就不希望你这么用了。你再用的话，需要说明原因，而且理由不充分的话苹果有可能拒绝通过你的APP。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2是增加域名白名单（NSExceptionDomains），访问白名单之内的网站请求可以是HTTP请求。这种做法也要说明理由，苹果认为你的理由不充分仍然有可能拒绝通过你的APP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当然还有一种方案，是在iOS10系统新加的属性NSAllowsArbitraryLoadsInWebContent，专门针对浏览器访问的开关。设想一个浏览器应用，用户可以输入任务网址，这个网址能不能支持HTTPS协议，没人知道。所以就有这么一个开关，打开之后，浏览器的访问就不受HTTPS限制。但是不好的消息是，这个浏览器必须是WKWebView，而不能是UIWebView(截止2016.10.18前，查到资料是这样的，但是不排除以后苹果会对UIWebView也可是使用这个属性)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在大家都担心2017年后该怎么支持HTTPS。我觉得大公司的话应该尽早全部支持HTTPS，小公司的话可以考虑使用上述方案。发挥聪明才智，给一些理由糊弄苹果让你的APP不支持HTTPS。我觉得针对中国的国情，苹果有可能会对中国的APP采用HTTPS审核宽松些，但也很难说。&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://onevcat.com/2016/06/ios-10-ats/"&gt;关于 iOS 10 中 ATS 的问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swiftcafe.io/2016/09/20/ats/"&gt;iOS 10 与 ATS - 更加安全的机制&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Tue, 18 Oct 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-10-18:iosying-yong-2017nian-qiang-zhi-ying-yong-httpswen-ti.html</guid><category>HTTPS 2017 iOS10</category></item><item><title>iOS上传文件支持断点续传</title><link>http://szuwest.github.io/iosshang-chuan-wen-jian-zhi-chi-duan-dian-xu-chuan.html</link><description>&lt;h2&gt;iOS上传文件支持断点续传&lt;/h2&gt;
&lt;p&gt;在挺久之前我写过一篇文章里提到上传文件的断点续传的问题，我没有找到好的方法。以前我采用的方式是用&lt;strong&gt;NSFileHandl&lt;/strong&gt;的方法seekToFileOffset，移到已经文件已经上传了的部分，然后采用readDataToEndOfFile读取剩下部分到内存中NSData。但是这个方案问题是，如果文件很大，需读取的NSData很大，内存就会爆掉。所以最终没有采用这个方案。&lt;/p&gt;
&lt;p&gt;最近我们来个新同事，技术能力很不错。我让他去研究一下这个问题。开始他找到的方案跟我之前的那个是一样的，我说这个我之前有考虑过，不能采用。然后他继续研究，后来发现了原来&lt;strong&gt;NSInputStream&lt;/strong&gt;有相关按offset读取文件的接口。不，正确来说是&lt;strong&gt;NSStream的&lt;/strong&gt;接口，而且有点隐蔽性质的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt; &lt;span class="n"&gt;forKey&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSStreamPropertyKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;NSStreamFileCurrentOffsetKey&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;NSNumber&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;containing&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;absolute&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只要对NSInputStream指定它的NSStreamFileCurrentOffsetKey的值为你想要的offset，文件在读取的时候就会从这个offset开始读取。&lt;/p&gt;
&lt;p&gt;有了这个API，用AFN来支持上传的断点续传，也就很容易了。不过要支持这个时候AFN的progress就是需要上传部分的progress。要展示整个文件的progress的话，需要再转化一下。&lt;/p&gt;
&lt;p&gt;现在断点续传的问题已解决，就还剩下 看不导出系统相册里的视频文件，直接读取上传这个问题没有解决了。看看什么时候能把这个问题也解决掉^_^&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Fri, 30 Sep 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-09-30:iosshang-chuan-wen-jian-zhi-chi-duan-dian-xu-chuan.html</guid><category>上传 断点续传 NSInputStream</category></item><item><title>升级Xcode8后Jenkins打包问题</title><link>http://szuwest.github.io/sheng-ji-xcode8hou-jenkinsda-bao-wen-ti.html</link><description>&lt;h2&gt;升级Xcode8后Jenkins打包问题&lt;/h2&gt;
&lt;p&gt;上次说升级Xcode8之后，Jenkins自动打包就不行了，今天终于弄好了。前前后后话的时间有一天的时间才搞好，不容易。尝试了30多次才成功了，说多了都是泪。。现在记录一下。&lt;/p&gt;
&lt;h3&gt;我们的需求&lt;/h3&gt;
&lt;p&gt;说一下我们的需求。我们开发人员采用的是正式签名，正式的BundleID，但是我们Jenkins自动打包出来的是企业版，用的是企业版BundleID。代码是同一份，但是Jenkins打包企业版时时要先修改BundleID和相关版本号之类的。在Xcode7时代，我已经将Jenkins配置好，可以正常打出企业版的安装包。但是升级到Xcode8之后，Jenkins打包会报错，即原来的配置已经不能打出企业包来了。&lt;/p&gt;
&lt;h3&gt;解决方法&lt;/h3&gt;
&lt;p&gt;先说不能打包的原因，主要是签名方式冲突。Jenkins的配置是指定签名，而我们Xcode8采用的是自动签名。我们开发时采用自动签名，而且打企业版安装采用的签名文件跟我们开发时的签名文件时不一样的。所以Jenkins打包肯定得采用手动签名方式。&lt;/p&gt;
&lt;p&gt;报错如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;xxxxx&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;conflicting&lt;/span&gt; &lt;span class="n"&gt;provisioning&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;xxxxx&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;automatically&lt;/span&gt; &lt;span class="kt"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;signing&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt; &lt;span class="n"&gt;xxxxxxxxxxxxx&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;manually&lt;/span&gt; &lt;span class="n"&gt;specified&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; 
&lt;span class="n"&gt;Set&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;signing&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;iPhone Developer&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;manual&lt;/span&gt; &lt;span class="n"&gt;signing&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以解决方法也很直接，就是不采用自动签名。可是我找遍了国内外网上资料，没有人提供 自动关闭 自动签名 的方法。倒是有人在苹果的网站上提问如何关闭自动签名。我在国内一些网站上也有一些人提到这个问题，其中有人用 bashsell 的sed 文本替换命令来修改project.pbxproj里面的内容。&lt;/p&gt;
&lt;p&gt;总之我的方向就是关闭自动打包，修改一些配置，然后让它可以打包。说起来简单，自动签名方式怎么关闭，需要改哪些配置，我不知道，只能摸索和不断的尝试。&lt;/p&gt;
&lt;p&gt;一开始我尝试按照网上的一个列子来关闭自动签名方式。它是采用 sed 命令。由于我本身对bash shell 也不是很熟悉，试了好多次都没有成功。而且到后面我发现要关闭自动签名，只将 ProvisioningStyle 改为 Manual是不够的。我自己手动的去关闭和开启自动签名，看看project.pbxproj到底哪些参数改变了，然后采用我比较熟悉的PlistBuddy命令，写了个脚本去改变这些值，来达到关闭自动签名的效果。&lt;/p&gt;
&lt;p&gt;最终我写出来的脚本大概是这样的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#修改ProvisioningStyle 
/usr/libexec/PlistBuddy -c “Set :objects:574F440C1AEE5EA3003F9BB5:attributes:TargetAttributes:574F44131AEE5EA3003F9BB5:ProvisioningStyle Manual”  &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;WORKSPACE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/xxxxx/xxxxx.xcodeproj/project.pbxproj

#修改Distribution签名配置
/usr/libexec/PlistBuddy -c “Set :objects:2B888A201AFB4C3F005E1E12:buildSettings:CODE_SIGN_IDENTITY[sdk=iphoneos*] ‘xxxxxxxxxxxxxx’”  &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;WORKSPACE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/xxxxx/xxxxx.xcodeproj/project.pbxproj

/usr/libexec/PlistBuddy -c “Set :objects:2B888A201AFB4C3F005E1E12:buildSettings:PROVISIONING_PROFILE  &amp;#39;xxxxxxxxxxxx&amp;#39;”  &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;WORKSPACE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/xxxxx/xxxxx.xcodeproj/project.pbxproj

/usr/libexec/PlistBuddy -c “Set :objects:2B888A201AFB4C3F005E1E12:buildSettings:PROVISIONING_PROFILE_SPECIFIER xxxxxxxxxxxx”  &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;WORKSPACE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/xxxxx/xxxxx.xcodeproj/project.pbxproj

#修改Debug签名配置
/usr/libexec/PlistBuddy -c “Set :objects:574F443B1AEE5EA4003F9BB5:buildSettings:CODE_SIGN_IDENTITY[sdk=iphoneos*] ‘iPhone Distribution’”  &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;WORKSPACE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/xxxxx/xxxxx.xcodeproj/project.pbxproj

/usr/libexec/PlistBuddy -c “Set :objects:574F443B1AEE5EA4003F9BB5:buildSettings:PROVISIONING_PROFILE  &amp;#39;xxxxxxxxxxxx&amp;#39;”  &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;WORKSPACE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/xxxxx/xxxxx.xcodeproj/project.pbxproj

/usr/libexec/PlistBuddy -c “Set :objects:574F443B1AEE5EA4003F9BB5:buildSettings:PROVISIONING_PROFILE_SPECIFIER xxxxxxxxxxxx”  &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;WORKSPACE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/xxxxx/xxxxx.xcodeproj/project.pbxproj

#修改Release签名配置
/usr/libexec/PlistBuddy -c “Set :objects:574F443C1AEE5EA4003F9BB5:buildSettings:CODE_SIGN_IDENTITY[sdk=iphoneos*] ‘iPhone Distribution’”  &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;WORKSPACE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/xxxxx/xxxxx.xcodeproj/project.pbxproj

/usr/libexec/PlistBuddy -c “Set :objects:574F443C1AEE5EA4003F9BB5:buildSettings:PROVISIONING_PROFILE  &amp;#39;xxxxxxxxxxxx&amp;#39;”  &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;WORKSPACE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/xxxxx/xxxxx.xcodeproj/project.pbxproj

/usr/libexec/PlistBuddy -c “Set :objects:574F443C1AEE5EA4003F9BB5:buildSettings:PROVISIONING_PROFILE_SPECIFIER xxxxxxxxxxxx”  &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;WORKSPACE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/xxxxx/xxxxx.xcodeproj/project.pbxproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;归纳起来，就是先将签名方式ProvisioningStyle改为手动的，然后将Distribution，Debug, Release 相关的CODE_SIGN_IDENTITY[sdk=iphoneos*]，buildSettings:PROVISIONING_PROFILE，PROVISIONING_PROFILE_SPECIFIER的值做对应的修改。另外BundleID和develop team我没有用PlistBuddy来修改，而是通过在Jenkins的配置&lt;strong&gt;Custom xcodebuild arguments&lt;/strong&gt; 加入参数 &lt;code&gt;DEVELOPMENT_TEAM=DLF3GQKP4Q PRODUCT_BUNDLE_IDENTIFIER=xxxxxxxxx&lt;/code&gt; 来指定。这样编译器会自动修改相关值&lt;/p&gt;
&lt;p&gt;配置完这些，ipa包是能打出来了，但是却最后失败了，报错是签名问题，还有找不到ResourceRules.plist。&lt;/p&gt;
&lt;p&gt;最终我发现只要 把Jenkins配置中的把 Sign IPA at build time 的勾选去掉，然后打包就没有问题了。然后我也把在Jenkins的配置&lt;strong&gt;Custom xcodebuild arguments&lt;/strong&gt; 参数中，原来有的参数 &lt;code&gt;CODE_SIGN_RESOURCE_RULES_PATH=$(SDKROOT)/ResourceRules.plist&lt;/code&gt; 去掉，打出来的安装包也没有问题。当时这个参数在Xcode7是必填的，现在Xcode8却可以去掉了。&lt;/p&gt;
&lt;p&gt;以上就是我被Xcode8折腾经验总结。&lt;/p&gt;
&lt;h2&gt;后记：补充&lt;/h2&gt;
&lt;p&gt;这篇文章写了不久，就收到了Soto同学的反馈。根据这篇文章他也成功打包了，而且他还总结了一些更方便的方法。我补充一下，后续有同样问题的人就可以不那么折腾了。&lt;/p&gt;
&lt;p&gt;可以通过Jenkins的配置&lt;em&gt;Custom xcodebuild arguments&lt;/em&gt; 参数来修改的参数有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PRODUCT_BUNDLE_IDENTIFIER&lt;/li&gt;
&lt;li&gt;DEVELOPMENT_TEAM&lt;/li&gt;
&lt;li&gt;PROVISIONING_PROFILE&lt;/li&gt;
&lt;li&gt;PROVISIONING_PROFILE_SPECIFIER&lt;/li&gt;
&lt;li&gt;CODE_SIGN_IDENTITY&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中CODE_SIGN_IDENTITY[sdk=iphoneos*]貌似不是必须的，在xcodebuild的参数指定&lt;strong&gt;CODE_SIGN_IDENTITY="iPhone Distribution"&lt;/strong&gt;就行了。&lt;/p&gt;
&lt;p&gt;那么只有&lt;strong&gt;ProvisioningStyle&lt;/strong&gt;要通过脚本来修改。而且 还可以通过 sed 命令来修改，不必用PlistBuddy来修改（用PlistBuddy要先找到相关UUID，很麻烦）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ProvisioningStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Automatic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ProvisioningStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Manual&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pbxproj&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Soto同学就是采用这种方法成功打出了企业版包和AppStore包，成功避过了要查找UUID来定位修改相关参数值的麻烦做法。这是一种好方法。&lt;/p&gt;
&lt;p&gt;不过这种改法不能适应所有情况，我的项目就不能这么做。我的项目依赖于另外一个工程编译出来的framework，如果在xcodebuild参数里指定PROVISIONING_PROFILE和PROVISIONING_PROFILE_SPECIFIER，是不行的，会造成编译这个framework的时候报错。这个framework工程的配置也要注意，是要把自动签名关闭，并且team指定为none。所以我还是保持我原来的做法，虽然很笨，不灵活，但是能解决问题。&lt;/p&gt;
&lt;p&gt;如果谁跟我的情况类似，然后有更好的办法，麻烦告诉我^_^&lt;/p&gt;
&lt;h2&gt;升级macOS Sierra 后打包签名失败问题&lt;/h2&gt;
&lt;p&gt;这个问题是Soto同学遇到的，我没遇到，因为我还没升级到最新系统。这里也说一下，给有需要的人用。&lt;/p&gt;
&lt;p&gt;如果你打包出现签名错误，例如：&lt;/p&gt;
&lt;p&gt;Command /usr/bin/codesign failed with exit code 1, 并且还 returned: -25308, unknown error -1=fffffffffff 之类的关键字，很有可能就是因为升级到了最新系统macOS Sierra导致的。&lt;/p&gt;
&lt;p&gt;解决方式：&lt;/p&gt;
&lt;p&gt;打开keychain，然后找到你打包用到的那个证书，展开证书，选中那个密钥，右击--&amp;gt;显示简介--&amp;gt;访问控制，然后选择 &lt;strong&gt;允许所有应用程序访问此项目&lt;/strong&gt;,就可以了。&lt;/p&gt;
&lt;p&gt;感谢Soto同学的反馈&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;由于我的网络经常连不上评论系统Disqus，所以有问题想问我或者想跟我交流的，请直接给我发邮件或者加我QQ411084057.谢谢&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Thu, 29 Sep 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-09-29:sheng-ji-xcode8hou-jenkinsda-bao-wen-ti.html</guid><category>Jenkins Xcode8 iOS10 framework</category></item><item><title>升级Xcode8后需要注意的事项</title><link>http://szuwest.github.io/sheng-ji-xcode8hou-xu-yao-zhu-yi-de-shi-xiang.html</link><description>&lt;h2&gt;升级Xcode8后需要注意的事项&lt;/h2&gt;
&lt;p&gt;随着iPhone7开卖适配iOS10成了必不可少的事情。要适配iOS10，升级Xcode8又是必须的事情。可以一旦升级Xcode8之后会发现一堆坑在里面。每次升级Xcode或者iOS系统或者Mac系统都是有一堆的坑，每次都要折腾得你死去活来不罢休。这有点像飞蛾扑火，明明知道前面是火坑，也要往下跳。&lt;/p&gt;
&lt;h3&gt;升级第一坑，注释代码快捷键失效&lt;/h3&gt;
&lt;p&gt;当你经过漫长的等待Xcode下载和安装之后，满心欢喜打开Xcode，发现字体变了，貌似看上去还不错（有同事跟我说这很丑），然后开始写代码，发现可以高亮显示当前编辑行，不错嘛，写着写着突然想注释掉一行代码，发现command+/怎么按都没反应，十分恼火。这什么破玩意儿，这么明显的bug都有。然后网上搜解决方案，确实有人也遇到这个问题。貌似需要跑一个命令什么的。实际上不用那么费劲，重启一下Xcode就好了。&lt;/p&gt;
&lt;h3&gt;升级第二坑，iOS的字体变宽了&lt;/h3&gt;
&lt;p&gt;当我Run一下程序想看看我们的程序在iOS10上有没有问题，启动之后打开引导页，发现最底下的两个按钮字显示不全了：注册账号 变成了 注···号，登录账号变成了 登···号，这是什么鬼？我没有动过这块的任何代码，甚至连这个页面的xib也没有打开过。后来才知道，运来是iOS的字体变宽了，如果你一个按钮在iOS9原来刚好放下4个字，然后iOS10它就装不下了。现在的解决办法是手动调节控件的宽度，发现问题一个解决一个。&lt;/p&gt;
&lt;h3&gt;升级第三坑，xib不兼容Xcode7了&lt;/h3&gt;
&lt;p&gt;这个坑实在试太无良知了，怎么可以这样做。由于我比较早升级到Xcode8，其他同事还没升级，我在Xcode8上编辑过一个xib文件，提交了。另外一个同事更新代码后就编译不过了：提示要使用Xcode8.这不是强制升级么？你用Xcode8编辑xib后，Xcode会加入一行代码说明 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="11161"/&amp;gt;
        &amp;lt;capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这就是说这是用Xcode8保存的，你必须要要用Xcode8打开。这给团队协作带来极大不便，逼着大家要升级。当然也有解决办法。在File Inspector里有个open in Latest Xcode 的选项，把它改为Xcode7.x就会重新保一下。&lt;/p&gt;
&lt;h3&gt;升级第四坑，sigining方式变了&lt;/h3&gt;
&lt;p&gt;这是个大坑，当然你可以说它是大好，如果它没有给你带来不便利的话。Xcode8里有个自动管理签名开发，即将签名改为自动管理签名后者手动管理签名。其实就是要你登录你的开发账号，然后选择你的develop team。可是一般团队里就一个开发者账号，你就必须给每个人的电脑上都登录一下这个开发者账号。如果能把账号密码公开给大家当然没问题，不能的话就只有管理者去每个人的电脑上登录一下账号。&lt;/p&gt;
&lt;p&gt;这都还是算好的，因为我们开发者自己弄两下就可以搞定。但是有个蛋疼的地方：我们给测试同事打包是在打包机上自动打包的，采用的是Jenkins持续集成环境，并且打包采用的证书是企业版证书，打包出来之后需要给大家随意安装的。当升级Xcode8之后，signing方式改变了，然后打包就失败了。因为打包机上我们是必须重新修改BundleID，然后指定签名文件。但是我们平时开发是Xcode配置是自动签名方式，打包机是通过Jenkins重新配置了打包方式，这样就出问题了。。。&lt;/p&gt;
&lt;p&gt;我现在尝试去解决这种冲突，但是还没搞定。develop team貌似Xcode8中新加的，以前不需要指定。我也网上找了一些资料，貌似有人想直接打包前直接用she'll脚本修改工程文件配置。这也是一个方向。接下来下周我估计要把这个问题研究一下。每次环境变动，Jenkins都要重新搞，折腾得我苦不堪言。什么时候苹果把签名和调试不要搞得那么复杂，造福一下开发者就好了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 24 Sep 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-09-24:sheng-ji-xcode8hou-xu-yao-zhu-yi-de-shi-xiang.html</guid><category>Jenkins Xcode8 iOS10</category></item><item><title>关于技术人员加班问题的看法</title><link>http://szuwest.github.io/guan-yu-ji-zhu-ren-yuan-jia-ban-wen-ti-de-kan-fa.html</link><description>&lt;h2&gt;关于技术人员加班问题的看法&lt;/h2&gt;
&lt;p&gt;身在IT行业，加班是永远绕不开的话题。互联网是以快速变化著称，加班似乎是成了名正言顺的。最近58同城加班996的问题也引起了广泛关注，而恰好最近两个星期，我们部门也一直在加班。我准备也谈谈这个问题。&lt;/p&gt;
&lt;h3&gt;我们加班的缘由&lt;/h3&gt;
&lt;p&gt;两个星期前，我们接到消息，要在两周之类上线3.0大版本。3.0版本改版非常大，虽然一部分功能已经开发了，但是一直在改，功能就从来没有稳定过。而且我们还正在开发2.7版本，突然间两周之类要上线3.0版本，是不可能的。但是这应该是老板的命令，我们应该没有还价的可能，所以加班是不可避免。还有一个更加不可避免加班的理由：我们的一个同事这个时候被借走了，借去别的子公司帮忙开发。这个借人也不是我们可以商量的，这个公司老板的要求，所以雪上加箱。&lt;/p&gt;
&lt;h3&gt;加班开发和家庭影响&lt;/h3&gt;
&lt;p&gt;为了能尽可能达成目标，我们每天都是工作到10点多，有些同事要搞到凌晨2点多，从产品，设计，到测试，所有人都需要加班。周末两天也需要加班。我老婆对我每天都很晚回家意见非常大，所以我尽量能10点多之后就回家，不然肯定闹家庭矛盾。周日我也不得不请假，留了另外两个同事在加班开发。其实我们已经非常高效了，我们的人力比Android客户端的人力还要少，大家都要努力加班赶进度。后来两个星期后，结果当然是新版上不了线的，所以拖后了几天。他们还想我们客户端周末来加班赶进度，可是我真的不想再加班了，因为我们的团队已经连续上了12天班了，所以我就没有要求加班，我觉得必须让大家停一下，因为后面半个月还有更艰巨的任务等着我们，我不想把我们的队伍搞残。&lt;/p&gt;
&lt;h2&gt;加班的伤害&lt;/h2&gt;
&lt;p&gt;本来我想说说加班是否有必要，但是想了想在这个行业貌似有时候加班是不可避免。就像我们现在的情况。但是造成需要加班来实现需求和赶进度是谁的过错？是技术人员无能，还是管理层的过错。我倾向于管理层的过错。管理层很多时候想不清楚，或者想清楚了计划没有做好，需要团队加班来开发。很多时候加班是可以避免的。就像我们现在的情况，其实3.0版本一早就开始规划了，为什么之前没有想好，而突然一句话就说要上线？之前那么多时间去干嘛了？就算有些变化不可避免，一定要加班才能解决，我希望管理层也有心里准备，长时间加班的造成伤害是很大，而且加班赶出来的东西，质量无法保证，有可能会造成一些技术债务。有些伤害可能无法弥补的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给技术人员身体健康造成影响。每天加班给技术人员造成休息时间不足，没有时间锻炼，长期处于亚健康状体，一旦得病对身体影响很大&lt;/li&gt;
&lt;li&gt;造成家庭矛盾。每天很晚回家，陪伴家人的时间很短。夫妻很容易闹矛盾，这个影响家庭和谐，严重的话会影响婚姻。&lt;/li&gt;
&lt;li&gt;产品质量无法保证，有可能会造成一些技术债务。每天大量的工作，人很容易疲惫，大家为了赶进度，也会忽略质量。这样很难保证产品的质量是最优的，有些架构不好的话，会造成一些技术债务。后面需要花大量时间来偿还。&lt;/li&gt;
&lt;li&gt;容易造成人员流失。我觉得这可能对公司伤害最大的。因为长期的加班形态会造成上面3个不好的影响，然后员工就很有可能离开。尤其是时候没有做好弥补的情况。例如产品最终是做出来了，但是没有达到预期效果，虽然员工加班了，没有办法得到他们期望的薪酬或者奖励补偿，他们会对公司很失望，所以很容易就会选择离开。这个是非常自然的，我自己以前就经历一次。我们加班加点花了两个月将产品做出来了，最后很多人就离开了，我也自己当时还幻想公司会给我加薪或者给的年终奖多一些，最终的结果很失望，我也选择了离开。所以我对大部分的加班赶产品的形式都是不看好的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以我是反对长期加班的，对于那种996的上班时间，更是不看好，这简直是剥削，这是管理层的失职。如果是非加班不可，一定要做好计划，不能长期加班，给予调休和补偿。&lt;/p&gt;
&lt;p&gt;总之，能不加班就不要加班，其他方面做好，提高工作效率和协作效率，这才是正道。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 04 Sep 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-09-04:guan-yu-ji-zhu-ren-yuan-jia-ban-wen-ti-de-kan-fa.html</guid><category>加班</category></item><item><title>iOS持续集成记(iOS+Jenkins+Cocoapods+蒲公英)</title><link>http://szuwest.github.io/ioschi-xu-ji-cheng-ji-iosjenkinscocoapodspu-gong-ying.html</link><description>&lt;h2&gt;iOS持续集成记（iOS+Jenkins+Cocoapods+蒲公英）&lt;/h2&gt;
&lt;p&gt;原来我们iOS项目是有持续集成环境的，但是有一次升级系统还是升级xcode后，Jenkins就打不出可用的安装包了。原来负责整个打包机的同事又离职了，有一段时间我们都是手动打包给QA同事安装测试，现在领导要求必须把持续集成环境弄好，我们花了大约两周才基本弄好整个持续集成环境，现在把我整个过程中遇到的坑记录一下。&lt;/p&gt;
&lt;h2&gt;重装系统&lt;/h2&gt;
&lt;p&gt;打包机自从某一次升级系统之后就变得非常慢，打个包需要1个小时左右，简直要命。所以新的环境必须要建立在重装后的系统上。因为要格式化硬盘，所以要制作系统启动盘，这个网上也有不少教程，这里有个需要注意的，下载macOS系统时，一定要从官方下载。我一开始是自己在百度云上下的，制作好安装盘后重启电脑，并且将硬盘格式化后安装系统，发现验证不通过，好在另外一个同事在官网下了一个，我在它的电脑上重新制作了一次安装盘。假设你只要一台Mac电脑，遇到这种情况你就悲剧了。&lt;/p&gt;
&lt;h2&gt;git拉取代码的坑&lt;/h2&gt;
&lt;p&gt;系统装好了，Jenkins也装好了，然后配置拉去代码，可是代码死活拉不下来，为此我的同事搞了差不多一天，试了各种方法，也搞不下来代码，都是在一半的时候失败了。后来我也去弄了半天，同样的错误。主要原因可能是代码量太大了，因为其他的小工程可以git clone 下来。我突然想到换一下拉取协议试试，不采用HTTP方式，而是采用git@host/xxxx.git的方式来拉取代码，果然成功了。采用这种方式后，在Jenkins里需要配置ssh的RSA秘钥，在gitlab上面要配置公钥，但是我在Jenkins里配置私钥时，拷贝私钥时，只拷贝了中间那部分，导致一直验证不过，也折腾了很长一段时间才发现，并改正了过来。&lt;/p&gt;
&lt;h2&gt;CocoaPods的坑&lt;/h2&gt;
&lt;p&gt;我们项目用了CocoaPods，而且pods里还有我们的私有库。虽然git clone代码下来了，但是pod install死活不成功。开始以为是pod环境问题，查了很多资料也解决不了。后来我问了一个遇到过这种情况同事，他说是Podfile的source问题，改成ssh协议拉取就可以了。看来仍然是git的问题。&lt;/p&gt;
&lt;p&gt;CocoaPods也能拉取到了，终于可以进入build步骤了。在Jenkins里配置有一个要特别注意的地方，因为使用CocoaPods的工程编译的是workspace，而不是普通的project。Jenkins里xcode配置需要指定workspace的名称，才能正确编译。&lt;/p&gt;
&lt;h2&gt;企业版编译和修改BundleID&lt;/h2&gt;
&lt;p&gt;由于我们打出来的包需要时外部可以随时安装的，所以需要是企业证书的安装包。然而企业包的BundleID是跟正常AppStore的包的BundleID不一样的。一般做法是在正常的AppStore包的BundleID后面直接加上Enterprise。我一开始修改了info.plist后，发现还是因为BundleID跟证书不匹配而编译失败，发现BundleID还是没有变。最终网上查资料才发现，光改了info.plist的BundleID还不够，还要修改project配置里的BundleID。我在网上找了很久也没有找到比较好的修改project里参数的方法。不过最终我在stackoverflow上找个一种方法，在xcodebuild的编译参数里，可以加入一个修改BundleID的参数，这个问题就这样解决了。&lt;br/&gt;
&lt;strong&gt;Custom xcodebuild arguments&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;CODE_SIGN_RESOURCE_RULES_PATH=$(SDKROOT)/ResourceRules.plist PRODUCT_BUNDLE_IDENTIFIER=BundleID&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;随便提一下，Jenkins的配置里有一个叫Change BundleID的配置项，貌似没有什么用。&lt;/p&gt;
&lt;h2&gt;上传和发邮件&lt;/h2&gt;
&lt;p&gt;安装包打出来了，要上传到共享服务器和发布到外网给大家安装，还要发邮件通知QA和相关人员。这一步网上很多都是通过编写Python脚本来实现。我试过Jenkins的FTP插件配置，将安装包上传到我们内部共享服务器，但是失败了，没有太多时间研究就放弃了。转而研究上传蒲公英。我试过网上的一些方法，但是只有通过curl方式上传才成功的。但是注意curl命令后的的file参数有个@。例如 curl -F "file=@path"&lt;/p&gt;
&lt;p&gt;为了上传ipa和发邮件成功，我还查阅了不少Python的语法和bash shell的语法，收获不少。每一次折腾都是进步。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Mon, 18 Jul 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-07-18:ioschi-xu-ji-cheng-ji-iosjenkinscocoapodspu-gong-ying.html</guid><category>Jenkins Cocoapods 蒲公英</category></item><item><title>打印杨辉三角--编程算法系列之一</title><link>http://szuwest.github.io/da-yin-yang-hui-san-jiao-bian-cheng-suan-fa-xi-lie-zhi-yi.html</link><description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;算法是程序员从职业开始到职业结束，估计都是绕不开的话题。所有大公司技术面试都会考算法题，不管国内国外。我一直想非得这样算法吗，没有别的更好的考察方式吗？有没有算法不行但是写程序很厉害的人？我没有答案。也许算法确实比较好的考察方法，如果你确实是个聪明人，你应该克服算法不行的问题。运用算法解决某些问题，或者编写程序去实现某个算法，对程序员是一个重要的能力。所以我要锻炼自己拥有这个能力。我准备将我以前遇到的一些面试题目，真正的完全靠自己去实现，并记录下来。&lt;/p&gt;
&lt;h2&gt;杨辉三角&lt;/h2&gt;
&lt;p&gt;如果你听说过杨辉三角，但是又不记得具体是什么规格，那你跟当年的我一样。大概一两年前，X公司某个项目招人，他们的HR找到我让我去试试，当时我想试试也无妨。前面的一，二技术面试都没太多问题，他们问的都是工作中的技术，后来有一面只面了我纯算法问题，就是打印杨辉三角，我一下懵了，结果是死得很难看。
先看看杨辉三角的数字排列是怎样的：&lt;br/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;　&lt;/span&gt;                         &lt;span class="mi"&gt;1&lt;/span&gt;
                         &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
                       &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
                     &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
                   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
                 &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
               &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;  &lt;span class="mi"&gt;20&lt;/span&gt;  &lt;span class="mi"&gt;15&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
             &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;21&lt;/span&gt;  &lt;span class="mi"&gt;35&lt;/span&gt;  &lt;span class="mi"&gt;35&lt;/span&gt;  &lt;span class="mi"&gt;21&lt;/span&gt;  &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
           &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mi"&gt;28&lt;/span&gt;  &lt;span class="mi"&gt;56&lt;/span&gt;  &lt;span class="mi"&gt;70&lt;/span&gt;  &lt;span class="mi"&gt;56&lt;/span&gt;  &lt;span class="mi"&gt;28&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
         &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mi"&gt;36&lt;/span&gt;  &lt;span class="mi"&gt;84&lt;/span&gt;  &lt;span class="mi"&gt;126&lt;/span&gt; &lt;span class="mi"&gt;126&lt;/span&gt; &lt;span class="mi"&gt;84&lt;/span&gt;  &lt;span class="mi"&gt;36&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
       &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;45&lt;/span&gt;  &lt;span class="mi"&gt;120&lt;/span&gt; &lt;span class="mi"&gt;210&lt;/span&gt; &lt;span class="mi"&gt;252&lt;/span&gt; &lt;span class="mi"&gt;210&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;   
     &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="mi"&gt;55&lt;/span&gt;  &lt;span class="mi"&gt;165&lt;/span&gt; &lt;span class="mi"&gt;330&lt;/span&gt; &lt;span class="mi"&gt;462&lt;/span&gt; &lt;span class="mi"&gt;462&lt;/span&gt; &lt;span class="mi"&gt;330&lt;/span&gt; &lt;span class="mi"&gt;165&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;  &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;    
   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;  &lt;span class="mi"&gt;66&lt;/span&gt;  &lt;span class="mi"&gt;220&lt;/span&gt; &lt;span class="mi"&gt;495&lt;/span&gt; &lt;span class="mi"&gt;792&lt;/span&gt; &lt;span class="mi"&gt;924&lt;/span&gt; &lt;span class="mi"&gt;792&lt;/span&gt; &lt;span class="mi"&gt;495&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;  &lt;span class="mi"&gt;12&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;面试时我很容易紧张，人在紧张情况下貌似是很难转起来的，这是我的一大弊端。
当时面试官只在纸上画了前5行，只告诉了我杨辉三角的特点就是每个数字都是它左上角的那个数字和右上角的那个数字相加得来，第一个数字是1。我当时只得出运用递归算法来解这道题会比较容易理解。但是该怎么写我写不出来。后来很长一段时间我并没有忘记这道题，但是我没有去查怎么解决，我偶尔会想一下该怎么做。最近这一两周我对解决这个到题的欲望越来越强烈，所以我开始在记事本上动手写代码解决。后来我发现了杨辉三角的一些规律，这些规律帮助我将代码写了出来。&lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.杨辉三角第n行有n个数字&lt;/li&gt;
&lt;li&gt;2.每个数字都是它左上角的那个数字和右上角的那个数字相加得来，更具体一点这个数字是a(i,j),那么它是a(i-1,j-1)和a(i-1, j)相加得来的&lt;/li&gt;
&lt;li&gt;3.第1个数字是1.如果这个数字的左上角或右上角的那个数字不存在，那么就当做0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;我的分析过程&lt;/h3&gt;
&lt;p&gt;说实话，现在看起来这些规律显而易见，但是我还是在编写代码的过程中带才找到的。&lt;br/&gt;
我这个人在面试中真的无法做到像平时那样思考，这让我在面试中感觉自己是个无思考能力的人。还有我发现自己一定要先进入编程状态才能进行思考。所以我决定要解决这个问题时，我就打开一文本，开始写一些我已经想到的代码，直到现在，这个文本也还没有关闭过。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;第3点很浅显，它是基础，如果用递归实现的话这是递归的出口。第1点让我写出了两个for循环，但是循环体内是怎么实现，我纠结了很久。最开始我想用最简单的方法，把已计算出的数字放入一个数组，然后就把数组中的数字相加得出所需数字。但是我发现这个数组也不太用，我不想用二维数组。后来我才想清楚，直接在循环体内用一个递归函数就这个数字的值，然后把它打印出来，这个是行得通的。然后关键是这个递归函数怎么实现。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;一开始我把递归函数的参数设为n，发现怎么实现都不太对，后来发现其实应该是把参数设置为i,j，这样就跟循环体的下标对应起来，就很好解决了。最终要解决的就是递归的出口问题，这个也不是我一开始想的那么简单。我把下标设置成是以1开始的，i&amp;lt;1的话，它的值就是0，1的话就是1. 而对应j,为1的话，它是0，而且j是不能大于i的，大于i它的值也为0。
所以程序的最终实现是：&lt;/p&gt;
&lt;h3&gt;代码实现&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;\#&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;stdio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;yangHuiTriangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yangHuiTriangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yangHuiTriangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;pringYangHuiTriangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yangHuiTriangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d   &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当我第一次写完代码时，并没有完全写对，j&amp;gt;i的情况没有处理好。我自己对照着杨辉三角的数字来检验的时候，发现了问题，然后改了过来，然后我就把代码拷贝到一个工程里运行，结果出来了，是对的！&lt;/p&gt;
&lt;h3&gt;打印结果&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;   &lt;span class="mi"&gt;20&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;21&lt;/span&gt;   &lt;span class="mi"&gt;35&lt;/span&gt;   &lt;span class="mi"&gt;35&lt;/span&gt;   &lt;span class="mi"&gt;21&lt;/span&gt;   &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mi"&gt;28&lt;/span&gt;   &lt;span class="mi"&gt;56&lt;/span&gt;   &lt;span class="mi"&gt;70&lt;/span&gt;   &lt;span class="mi"&gt;56&lt;/span&gt;   &lt;span class="mi"&gt;28&lt;/span&gt;   &lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mi"&gt;36&lt;/span&gt;   &lt;span class="mi"&gt;84&lt;/span&gt;   &lt;span class="mi"&gt;126&lt;/span&gt;   &lt;span class="mi"&gt;126&lt;/span&gt;   &lt;span class="mi"&gt;84&lt;/span&gt;   &lt;span class="mi"&gt;36&lt;/span&gt;   &lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;45&lt;/span&gt;   &lt;span class="mi"&gt;120&lt;/span&gt;   &lt;span class="mi"&gt;210&lt;/span&gt;   &lt;span class="mi"&gt;252&lt;/span&gt;   &lt;span class="mi"&gt;210&lt;/span&gt;   &lt;span class="mi"&gt;120&lt;/span&gt;   &lt;span class="mi"&gt;45&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;   &lt;span class="mi"&gt;55&lt;/span&gt;   &lt;span class="mi"&gt;165&lt;/span&gt;   &lt;span class="mi"&gt;330&lt;/span&gt;   &lt;span class="mi"&gt;462&lt;/span&gt;   &lt;span class="mi"&gt;462&lt;/span&gt;   &lt;span class="mi"&gt;330&lt;/span&gt;   &lt;span class="mi"&gt;165&lt;/span&gt;   &lt;span class="mi"&gt;55&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;   &lt;span class="mi"&gt;66&lt;/span&gt;   &lt;span class="mi"&gt;220&lt;/span&gt;   &lt;span class="mi"&gt;495&lt;/span&gt;   &lt;span class="mi"&gt;792&lt;/span&gt;   &lt;span class="mi"&gt;924&lt;/span&gt;   &lt;span class="mi"&gt;792&lt;/span&gt;   &lt;span class="mi"&gt;495&lt;/span&gt;   &lt;span class="mi"&gt;220&lt;/span&gt;   &lt;span class="mi"&gt;66&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;虽然这个打印出来的结果不是金字塔形状，但是它的数字都是对的。对于打印成金字塔形状，以后再研究吧。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-07-17:da-yin-yang-hui-san-jiao-bian-cheng-suan-fa-xi-lie-zhi-yi.html</guid><category>算法 杨辉三角</category></item><item><title>浅谈VR</title><link>http://szuwest.github.io/qian-tan-vr.html</link><description>&lt;h2&gt;浅谈VR&lt;/h2&gt;
&lt;p&gt;最近VR火得不行，就连央视财经也有报道说“4年后VR市场规模高达550亿元！人才缺口达80万”。然后刚刚结束的高考，某一个省份的语文作文题也是跟VR相关。所以说，VR是今后几年最热门的一个话题和技术之一，没有人会反对。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;VR&lt;/strong&gt;, 是Virtual Reality的缩写，即虚拟现实，它其实不是最近新的技术，它只是因为移动互联网的兴起而变得热门起来。我记得真正被全世界人认识和讨论的触发事件是Facebook发重金收购了Oculus VR公司。而除了VR，实际上还有另外一个相近技术&lt;strong&gt;AR&lt;/strong&gt;. AR是Augmented Reality缩写，即增强现实。AR跟VR有挺大不同的，我现在研究得也不多，以后有机会我也想写一下AR相关的文字。&lt;/p&gt;
&lt;h2&gt;VR的应用&lt;/h2&gt;
&lt;p&gt;前几天我配老婆去海雅缤纷城逛街，然后发现那里有一个VR体验区，主要是VR电影和游戏结合的项目，还有一个是VR自行车。我体验了一下一个叫《地城游记》的游戏，感觉还可以。它主要是你坐在一个机器上，带上头盔，手可以握着一个杆，杆上有个按键，游戏中你可以按那个键来进行射击怪物。你坐在机器上，机器会根据游戏来进行晃动，例如我体验的是坐着过山车，它就会根据过山车来进行晃动，模拟你看到场景，就好像你真的在坐过山车一样。游戏中会有一些蝙蝠或者龙飞在你前面，然后有声音提示你射击它，你就会知道按那个键。无需任何人教，我看小朋友都会。体验时间大概10分钟，我老婆说我体验时笑得很开心，而同在一起体验的一个小朋友很镇定，没有太大反应。其实我笑的主要原因是我觉得这个游戏有点搞笑，没有很真实。一个原因是我看得模糊不清，我想是头盔里的分辨率不是很高，还有就是我近视，然后又没有带眼睛，加剧了这种不真实效果。还有就是游戏中的画面和那个晃动座椅结合的还不是很好，这也是个问题。这次体验价是30元。后来我发现还有一个VR体验店在负一层，那个看上去效果更好一些，有恐怖片的，鬼直接拿刀去捅你的那种，还有VR跑车，看上去比我之前体验的那个要好很多。不过价格也贵些，50元一次。&lt;/p&gt;
&lt;p&gt;类似的靠VR体验来收费赚钱的还真不少，我看到几乎每个大的商场都有。这是VR应用的一个方向。现在VR一体机设备都还比较贵，由企业做体验消费这种模式是先行者。我观察了一下，现在主要体验者是小孩，现在的爸妈都舍得发钱，也有像我这样的年轻人。所以未来VR应用的第一大行业应该是游戏行业。除此之外，我觉得VR电影也是一个重要的方向，3D电影的流行和普及也就是那么几年，未来VR技术成熟，肯定也很快普及。然后据说VR体育也是一个重要方向，因为有了VR，就好像现场看一下，这也是一个颠覆。不过什么时候能到来，很难说。不过VR现在已有一个方向很火了，那就是成人市场市场。性是人类永恒的主题，VR给成人市场带入一个新的方向。美国和日本这方面肯定会走在最前面，经常会看到一些美国或者日本的报道说VR技术如何应用到成人行业。&lt;/p&gt;
&lt;h2&gt;VR技术&lt;/h2&gt;
&lt;p&gt;作为技术人，必然争取要跟上技术的潮流。现在大公司都已布局和制定标准。Facebook的Oculus VR，Google的Cardboard，VR平台Daydream，微软的HoloLens，还有三星，HTC，索尼有有自己的VR产品。现在VR技术还处在初期阶段，不过Google已经赶先定制了一个标准，后面的反正肯定也越来越规范化和标准化。&lt;/p&gt;
&lt;p&gt;现在做VR开发，资料也很少，大都是针对特定平台来定制应用和游戏。不过这也是机会，越早进入，机会越多。就像当初智能手机看法那样。&lt;/p&gt;
&lt;p&gt;做VR开发，现在大都用Unity3D，我自己也曾有一段时间想学Unity开发，不过没有坚持下来。现在又不得不重新来了。不过现在有个大问题就是没有好的VR设备，虽然我有两个大朋VR眼镜，但是那简直玩具都不如，我估计国内的其他类似的VR眼镜例如暴风眼镜都差不多情况。暂时来说也只能走一步算一步了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 11 Jun 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-06-11:qian-tan-vr.html</guid><category>VR AR</category></item><item><title>关于H5和移动客户端开发的未来</title><link>http://szuwest.github.io/guan-yu-h5he-yi-dong-ke-hu-duan-kai-fa-de-wei-lai.html</link><description>&lt;h2&gt;关于H5和移动客户端开发的未来&lt;/h2&gt;
&lt;p&gt;&lt;br/&gt;从去年开始，我已经强烈感觉到移动端web开发的时候可能即将带来。我想为了避免以后找不到工作，我们客户端开发人员不得不开始学习移动端web开发或者混合开发。&lt;/p&gt;
&lt;p&gt;近一两年来，前端开发真的非常火，招不到人。就像前几年的移动客户端开发人才很热门一样。这不得不说得益于移动互联网快速的发展。web确实有它不可替代的好处，快速迭代和开发，不局限与特定平台，这是APP无法做到的。近来APP的开发趋近稳定饱和，而手机的处理能力越来越强，浏览器厂商也支持HTML5越来越完善，移动web开发必然崛起。现在H5已经成了所有技术小白人士都懂的一个词，这足以说明移动web开发已经到来。&lt;/p&gt;
&lt;h2&gt;我与H5的故事&lt;/h2&gt;
&lt;p&gt;HTML5技术早就开始了，但是一直没有完全普及，最近两年才真正的普及起来，H5也成了它的缩写代名词。早在2010我做毕业设计的时候，我就有研究过它。那是HTML5标准已经制定完毕，浏览器厂商已经开始慢慢的支持。我当时开始学习web开发，学习了JavaScript，学习了HTML，学习了CSS。我的毕业设计题目是《基于Google APP Engine 系统的web开发》当时GAE刚发布不久，然后我还采用了当时Google Web Tookit框架来开发我将要做的web即时通讯系统。当时Google还没推出中国，谷歌的各种服务都还在（只有一些些东西需要翻墙）。我用GWT开发我的即时通讯系统，用Google搜索资料和参与Google group讨论和学习，那真是一段充实的时光。那是我了解到ajax技术，采用ajax轮询做了一个简单的即时通讯网页。然后有学习到comet技术，采用comet技术开发了一个更好的即时通讯系统，这个就是我的毕业设计主要内容。当时我也研究到了HTML5的websocket技术，所以顺带把HTML5研究了一下，感觉到这个东西就是未来。当时很想采用websocket也做一个即时通信系统，但是时间不太够，而且当时浏览器也不支持不好，很不好做，就放弃了。因为这段经历，我了解到了HTML5, 也自学了一下JavaScript语言，接触了一下当时刚刚出来的jQuery库。现在这些年H5普及起来了，JavaScript库也发展很快，而且发展到了后端开发，真是没有想到。&lt;/p&gt;
&lt;h2&gt;移动客户端开发的未来&lt;/h2&gt;
&lt;p&gt;现在移动客户端的开发已经受到了web开发的影响。随着微信，淘宝这种超级APP的发展，我觉得移动端的web开发会越来越重要。以前移动端native开发是绝对主流，当年Facebook把它的应用完全采用native开发就是明证。但是现在越来越多混合开发的需求，微信的公众号就是一个例子，未来会更多这种例子。现在也越来越多混合开发技术或者直接采用web技术来开发APP。像我听说过了JSPatch, hybrid, 阿里最近主推的weex(但愿没写错)和Facebook主导的react-native。这些技术我真正有去接触和学习的就只有react-native，原因当然是这是Facebook在主导的，有保障。现在国内移动客户端的开发实际上还没有受这些技术影响很大，大家都还是以native为主。但是现在技术发展这么快，所不定半年或者一年后情况就变了。&lt;/p&gt;
&lt;p&gt;那么移动开发的未来是怎样的呢，会不会被web开发完全替代。我想这不太可能。我们可以类比PC系统，我们大部分时间都是以浏览器为主，但是我们仍然会安装一些其他客户端软件，使用一些客户端软件。未来的移动开发，APP开发会越来越艰难，入口基本都是被超级APP和浏览器占据着，并且超级APP可能分流了一部分浏览器的入口。未来的移动开发以跨品台的web开发为主，技术APP开发里面，web开发占据很大比例。APP开发技术可能主要是混合开发，或者纯采用类似react-native技术的跨平台开发。真正是纯native技术开发的应用应该非常少。&lt;/p&gt;
&lt;p&gt;所以，意识到这一点，学习前端知识就有一些迫切和必要了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Thu, 02 Jun 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-06-02:guan-yu-h5he-yi-dong-ke-hu-duan-kai-fa-de-wei-lai.html</guid><category>前端开发 H5 ReactNative</category></item><item><title>生活琐事</title><link>http://szuwest.github.io/sheng-huo-suo-shi.html</link><description>&lt;h2&gt;生活杂谈&lt;/h2&gt;
&lt;p&gt;最近好长时间没有写博客了，貌似差不多一年了。竟然想不到是那么久没有写过东西。&lt;/p&gt;
&lt;p&gt;去年年底买了车，现在也差不多要领结婚证了，时间的脚步根本停不下来，一眨眼该来的基本上都要来了。&lt;/p&gt;
&lt;p&gt;技术上没有太大的长进，也还有没得到有效的晋升，不过心没有太大的彷徨，因为已经麻木了吗？&lt;/p&gt;
&lt;p&gt;不过我还是一直想提升能力的，不管是技术上的，还是工作上的，生活上的。人的生活不单单是工作和技术，还有很多以外的东西。要在这个世界上好好的生活，需要掌握很多方面的能力，要接触很多的东西。&lt;/p&gt;
&lt;p&gt;我们要抱以开放的心态 接受和学习 生活中的方方面面，去掉浮躁，最终才能成功。
技术也一样。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Fri, 13 May 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-05-13:sheng-huo-suo-shi.html</guid><category>杂谈</category></item><item><title>同一个应用的安卓版本和iOS版本开发杂谈</title><link>http://szuwest.github.io/tong-yi-ge-ying-yong-de-an-zhuo-ban-ben-he-iosban-ben-kai-fa-za-tan.html</link><description>&lt;h2&gt;同一个应用的安卓版本和iOS版本开发杂谈&lt;/h2&gt;
&lt;p&gt;我前段时间帮朋友做了一个应用，当然说的更实在一点可以时候就是做外包应用，包括安卓版本和iOS版本。现在想谈一谈感想和总结。
&lt;br/&gt;&lt;br/&gt;
从1月份开始正式开发，最终在5月底完成所有交互，前后算起来就5个月的时间，当然中间有断断续续的开发和沟通。总的来说，这个时间超出了我的预期，所以总得来说我觉得价格有点不合适，稍微便宜了一些。但是因为这是我第一次做这种事情，而且也总体也还在我可接受的范围内，所以就当做一个经验了。个人做外包开发 不能低估工作量和沟通时间。越不正式的外包（朋友间的）需要的沟通和反复修改的情况会越多。千万不要低估这些情况。
&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Android版本开发&lt;/h2&gt;
&lt;p&gt;我是先开发安卓版本的，原因当然是安卓开发调试方便，修改方便，还有就是我比较熟悉Android开发。一开始朋友想先开发iPhone版本，我说这个调试不方便，说服他先开发安卓版本，我觉得我这个决策是对的。我的开发主要时间都是周末或者平时的空闲时间。了解了需求之后，安卓的第一个包含主要功能的初级版本一个月之后就出来了。然后我就打了个包给朋友用。当然会有很多问题，然后反复沟通和修改，几个星期之后，主要版本出来了。这时候已经是2月多了，我记得是在我放春节假之前改了改了一个版本给他，这个版本做了一些小细节修改和bug修复。由于朋友他没有测试人员，只能靠他自己测试，我自己测试得也不多，开始难免会有些bug，不过他会集中反馈，然后我集中修改，年后回来又改了一两个版本，3月多终于基本完成安卓版本的开发。总的来说，安卓版本开发是方便版本发布和调试。代码的话，程序架构我一开始就基本想好，程序不复杂，界面层和model层我都有比较好的重用，开源库也不少，我自己又对安卓很熟悉，没有遇到特别的难点，总体开发比较顺利。&lt;/p&gt;
&lt;h2&gt;iPhone版本的开发&lt;/h2&gt;
&lt;p&gt;春节的时候，由于没什么特别的事可做，我就做了一些iOS版本准备开发开发工作和基本架构搭建。由于有了Android版本的经验，iOS的基本架构就是对Android版本的基本架构的迁移。特别是model层，几乎是一一对应的。但是iOS版本的界面缺不是那么好做。因为这个应用的需求有些部分比较古怪，我觉得在iOS界面上不太好做。当然，主要原因还是我对iOS开发不算是特别精通，特别是UI层，经验不算很丰富。例如说有一个功能是这样的：主页面要根据上下滑动列表有将导航条收起和展开，还有几个tab页面还可以滑动切换。这两个功能分开做都不难，但是集中在一个页面都要支持这两个功能，就不好做了。最终我暂时只做了滑动切换tab。有了Android开发的经验，iOS开发做起来比较快，但是iOS和Android界面开发差异还是比较大，然后iOS界面开发代码量要比Android的要少，并且更容易重用。例如iOS的ViewController很容易重用，但是Android的Activity就比较难重用，所以Android开发的重复代码要多一些，我觉得这只要是由于Activity的机制造成的。
&lt;br/&gt;&lt;br/&gt;
iOS的开发是比较顺畅，但是调试就麻烦多了。由于朋友没有开发账号，我帮他申请了一个，然后我做了开发，怎么给他安装使用是个大问题。我在我们公司有企业版证书，安装调试很方便，但是没有企业版开发证书就相当麻烦了。你说把他的手机序列号加入开发证书，然后给他安装，我觉得这也很麻烦。所以我最终采用的是：打包应用上传到iTunesconnect，然后通过内部测试（Testflight）发给他安装。之前没怎么做过这种方式，我花了很多时间才最终走通整个流程。最大的一个坑是，我上传了ipa包到iTunesconnect，但是它死活不再内部测试哪里显示出来，我开始以为包还在处理中，等了两天还不行，我又上传了一个，还是不行，但是这次有提示缺少出口规格证明，然后晚上找了不少资料，才知道要在info.plist文件里加一个字段，说明没有使用加密功能。最终才走通整个流程，这里耗费我很多时间和精力，就算是一个经验吧。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;第一次将一个应用的安卓版本和iOS版本完整的做了一遍，虽然我以前也做过同一个应用的安卓版和iOS版，但是不是完成从头到尾参与。还有早在2011年我就从一个安卓应用的代码开发，到应用上架商店，一条龙下来我都完整经历过，但是iOS应用的完整一条龙这是第一次。从代码开发，注册开发者账号，下载证书，打包上传，应用测试，上架应用，真的是每一个环节都是自己亲身经历的，所以收获不少。总结如下：
&lt;br/&gt;&lt;br/&gt;
&lt;strong&gt;开发流程上&lt;/strong&gt;，Android开发要完胜iOS开发。Android开发是用Java语言开发，然后Android是开源的，Java也是跨平台的，都有很多开源库支持，很多功能可能Android本身不支持，但是hack起来比较容易。Java做架构也比较容易，有很多开源库支持，现在Android方面的开源库也越来越多，质量也越来越好。对于合作开发或者外包，Android开发有很大优势，因为因为分发很容易，随意就可以打包，安装，日志跟踪与收集非常方便。这点真的很赞。反观iOS，Objective-C基本上是只能限制于Mac OS的平台，iOS也是闭源的。要给别人安装调试那真是比较难：要先有开发者证书，要先把对方的设备的序列号登记入证书中。总之各种麻烦。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码重用上&lt;/strong&gt;，iOS更胜一筹。iOS的界面开发挺不错的，而且iOS应用整体性能要比Android要好，整体流畅性比较好（这是我朋友的直观感受）。我看整体代码，iOS端确实比Android端代码重用比较容易，特别是界面模块的代码，iOS的界面代码具有很多的可重用性，Android则不太行。不过鉴于Android端界面开发支持适配更多的设备，某些时候Android的界面开发要比iOS的界面开发便捷很多。另外Android端的动画开发现在也越来越方便，越来越接近iOS的动画开发了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Fri, 13 May 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-05-13:tong-yi-ge-ying-yong-de-an-zhuo-ban-ben-he-iosban-ben-kai-fa-za-tan.html</guid><category>Android开发 iOS开发 外包</category></item><item><title>iOS系统相册上传不得不说的那些事儿</title><link>http://szuwest.github.io/iosxi-tong-xiang-ce-shang-chuan-bu-de-bu-shuo-de-na-xie-shi-er.html</link><description>&lt;p&gt;最近在开发手机相册自动备份的功能，这就需要用到上传文件的功能。
其实我一年前也做过同样的功能，当时也做得不算很好。这次是别人做了，然后那人离职了。我来接受这块，然后发现有问题，然后准备认真的研究一下这个问题，顺便学习更多的iOS开发的知识。&lt;/p&gt;
&lt;h2&gt;系统相册概述&lt;/h2&gt;
&lt;p&gt;首先说一下iOS相册的问题。iOS的相片都是存放在系统库ALAssetLibrary中，开发者从这个库中读取到的是一个个ALAsset对象，而不是一个文件系统的File文件。当然iOS8系统新增了Photo Framework,但是只是增强了相关功能，还是不能直接取到File。 这个Android平台或者PC平台很不一样的。&lt;/p&gt;
&lt;p&gt;我们知道一般的上传文件流程就是，将本地的文件转换为二进制数据或流，通过HTTP协议或者socket协议，本地和服务器之间建立一个连接，本地将流写入这个连接，服务器那边接收这个流，并将接收到的流写入文件，直接客户端那边将整个文件传完，传输就结束了。上传文件这个过程一般会被封装库，使用者只需传入必要的参数就可以了。我以前做自动备份相册的时候，就是使用了别人提供的静态库，它上传文件API就是需要传一个文件的本地路径。这就麻烦了，因为我们的应用从iOS系统库读取到的对象是ALAsset, 所以我需要先将ALAsset从系统中导出，写入我们应用的沙盒中，然后再把它在沙盒中路径传给上传库进行上传。&lt;/p&gt;
&lt;h2&gt;导出ALAsset&lt;/h2&gt;
&lt;p&gt;据我所知，iOS系统cocoa层网络传输基本上只有&lt;strong&gt;NSURLConnection&lt;/strong&gt;和基于&lt;strong&gt;NSURLSession&lt;/strong&gt;一套API。它们提供的接口基本上都是基于NSData，或者文件路径或者NSInputStream。网上有很多库或者框架都是基于这两套API来做上传，我们一般也使用第三方的框架来减少工作量。这里最有名的当然就是AFNetWorking。AFNetWorking库提供给使用的接口就是有NSData接口，文件路径接口，由于我们上传的照片或者视频可能很大，所以就不能直接使用NSData的接口，所以必须使用文件接口。那么就得考虑如何将ALAsset导出为一个文件了。&lt;/p&gt;
&lt;p&gt;将ALAsset从系统中导出的方法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;exportAsset:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ALAsset&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;asset&lt;/span&gt; &lt;span class="nf"&gt;toFilePath:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSFileManager&lt;/span&gt; &lt;span class="n"&gt;defaultManager&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;createFileAtPath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;NSFileHandle&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSFileHandle&lt;/span&gt; &lt;span class="n"&gt;fileHandleForWritingToURL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fileUrl&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;ALAssetRepresentation&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;rep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt; &lt;span class="n"&gt;defaultRepresentation&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BufferSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;NSUInteger&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bytesRead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;@try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;bytesRead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rep&lt;/span&gt; &lt;span class="n"&gt;getBytes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="n"&gt;fromOffset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;BufferSize&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt; &lt;span class="n"&gt;writeData&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSData&lt;/span&gt; &lt;span class="n"&gt;dataWithBytesNoCopy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bytesRead&lt;/span&gt; &lt;span class="n"&gt;freeWhenDone&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
            &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;bytesRead&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;@catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSException&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytesRead&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个方法有个地方是特别要说明的，就是将ALAsset从系统库中读出来不是一下子读到内存中的，而是每次读一个buffer大小的数据，然后将这个buffer中的数据写入文件中，不断读取和写入，直到读完。这主要是避免一个文件（如视频）一下子读到内存中导致内存问题。
相册里大部分都是图片，而图片大部分也就是几MB, 一般就算一次性直接读取二进制数据到内存，不拷贝文件出来，也不会产生内存问题。可是视频就不行了，因为一般视频都比较大，几百MB甚至几个GB。所以上面这个导出方法十分重要。&lt;/p&gt;
&lt;p&gt;可是这个方法也有一个致命的问题，就是必须要有足够的剩余空间给你拷贝一份相片或者视频出来。特别是视频。空间问题是个大问题，因为正是因为用户的手机剩余空间不足了，才想要备份，而备份又需要额外的拷贝空间。设想一个用户拍了一个3GB的视频，他要备份这个视频，至少要预留3GB以上的剩余空间才能备份，这显然很不合理。那有没有别的不导出ALAsset直接上传的方法呢。我也一直在思考这个问题。我能想到的是：一种是边读取边上传，也就是通过ALAssetRepresentation的"getBytes:fromOffset:error"方法读取出来就上传。这样的话需要自己先建立连接，传输HTTPheader相关准备数据（boundary），然后就传输从ALAssetRepresentation读取的数据，读完之后再自己做一些结尾的工作。这一系列的操作都是自己来实现。貌似这样的工作量也挺大的，而且最重要的是我没想好这一整体过程实现起来是怎样的。还有一种就以chuck方式上传，即一段一段的上传给服务器，服务器那边收到之后自己组装成一个完成的文件。这样客户端这边传输可以利用已有的API，但是服务器那边需要额外的支持。我们的服务器这边比较弱，不能支持这种方式。&lt;/p&gt;
&lt;p&gt;所以我最终还是选择了导出ALAsset的方式，开发相对来说容易一些。不过这种方式被其他人吐槽和耻笑。。&lt;/p&gt;
&lt;h2&gt;上传的坑&lt;/h2&gt;
&lt;p&gt;我们项目里用的是&lt;strong&gt;AFNetWorking&lt;/strong&gt;库，所以我用它来上传。一开始我们用的是2.0版本，它有基于NSURLConnection的API，也有基于NSURLSession一套API。默认都是用NSURLConnection的API。但是iOS9不是不再推荐使用NSURLConnection了吗，所以AFN3.0版本直接就把NSURLConnection的相关API去掉了，全部都使用基于NSURLSession的API。本来我们用2.0版本好好的，但是更新到3.0版本后就出问题了。在iOS7.0系统上上传失败。经过和服务器调试，发现客户端的网络请求header里面没有contentLength，所以服务器那边失败了。就算你自己给它设置这个contentLength，它还是会丢弃掉，因为这是苹果API底层做的事！这实在是太蛋疼了，想改还改不了。所以我只能寻求别的方法。最终我用了ASIHTTPRequest库，为什么我没有采用旧的NSURLConnectionAPI呢。因为这个API也有它的缺陷，否则苹果也不会再最新的系统把它废弃掉。我自己在项目中遇到的问题是它改变不了HTTP header中connection连接方式，默认的是keep-alive方式，但是我们有一种情况是需要服务器中转HTTP请求，如果是keep-alive方式的话很容易出现问题，所以必须是设为close方式。蛋疼的问题来了，你改变不了！你在HTTP request头中设置了，到底层还是被系统覆盖掉，苹果实在是太霸道了。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ASIHTTPRequest&lt;/strong&gt;库是基于CFNetwork框架实现的，它很底层，你可以控制各种东西，所以我就采用了它，而且它也挺高效。唯一不足的就是这个库已经早就不维护了。只能自己维护。所以我最终的方式是，如果是iOS8以下系统，就采用ASI方式上传，否则就采用AFNetWorking方式上传。这里顺表ASI的另一个优点，它可以做到真正的断点续传下载，iOS系统提供NSURLSessionTask的断掉续传不是真的断掉续传，因为强退应用之后NSURLSessionTask会重新从头开始下载，它只能做到应用生命周期内的断掉续传。而ASI是真个下载过程你可以干涉，并且它本来已经把你保存好文件并且强退后重启也可以还原。虽然这个原理一点都不复杂，但是不知道为啥NSURLSessionTask就是不这样做，估计是外国人的使用习惯和思维和我们不同，人家不屑于实现这个？&lt;/p&gt;
&lt;h2&gt;后台上传&lt;/h2&gt;
&lt;p&gt;由于系统相册里有可能很多图片，上传又是一个比较慢的过程，所以很自然就想到要做后台上传。要做后台任务，iOS7以后当然是用基于NSURLSession的NSURLSessionTask，这也是苹果一直力推使用NSURLSession API的原因吧。可是NSURLSession相关API的坑也很多。
一般来说，只要生成一个具有后台任务配置的NSURLSession，然后由它来创建NSURLSessionUploadTask，然后基于这个task来上传就可以做到后台也能上传。实际的代码运行中崩溃了。
在网上搜了很多资料，最终发现说iOS的后台上传任务不支持NSData方式上传，它只支持file的方式上传。我们是基于AFN的mutiPart方式来上传，即你设置好相关的信息和文件地址，然后AFN会转换为输入流来上传，但是这种方式是后台上传不了的。&lt;/p&gt;
&lt;p&gt;既然后台只能支持文件方式上传，那就只能将所有的信息写入一个文件，最后将这个文件来上传，AFN确实也提供了这样一种方法。&lt;/p&gt;
&lt;p&gt;支持后台上传的方法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;uploadFile3:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;filePath&lt;/span&gt; &lt;span class="nf"&gt;withURL:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;urlString&lt;/span&gt; &lt;span class="nf"&gt;withSaveName:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;saveName&lt;/span&gt; &lt;span class="nf"&gt;andFileItem:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FileItem&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;fileItem&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;NSString&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;finalFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSTemporaryDirectory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;stringByAppendingPathComponent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileItem&lt;/span&gt; &lt;span class="n"&gt;getFileName&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
    &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fileType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileItem&lt;/span&gt; &lt;span class="n"&gt;contentType&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// Prepare a temporary file to store the multipart request prior to sending it to the server due to an alleged&lt;/span&gt;
    &lt;span class="c1"&gt;// bug in NSURLSessionTask.&lt;/span&gt;
    &lt;span class="c1"&gt;// Create a multipart form request.&lt;/span&gt;
    &lt;span class="n"&gt;AFHTTPRequestSerializer&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;requestSerizlizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;AFHTTPRequestSerializer&lt;/span&gt; &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;NSMutableURLRequest&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;multipartRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;requestSerizlizer&lt;/span&gt; &lt;span class="n"&gt;multipartFormRequestWithMethod&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;POST&amp;quot;&lt;/span&gt;
                                                                                    &lt;span class="nl"&gt;URLString:&lt;/span&gt;&lt;span class="n"&gt;urlString&lt;/span&gt;
                                                                                   &lt;span class="nl"&gt;parameters:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;
                                                                    &lt;span class="nl"&gt;constructingBodyWithBlock:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AFMultipartFormData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                             &lt;span class="p"&gt;{&lt;/span&gt;
                                                 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;formData&lt;/span&gt; &lt;span class="n"&gt;appendPartWithFileURL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSURL&lt;/span&gt; &lt;span class="n"&gt;fileURLWithPath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;saveName&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;saveName&lt;/span&gt; &lt;span class="n"&gt;mimeType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fileType&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                                             &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;multipartRequest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeoutInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Dump multipart request into the temporary file.&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;requestSerizlizer&lt;/span&gt; &lt;span class="n"&gt;requestWithMultipartFormRequest&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;multipartRequest&lt;/span&gt;
                                              &lt;span class="nl"&gt;writingStreamContentsToFile:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSURL&lt;/span&gt; &lt;span class="n"&gt;fileURLWithPath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;finalFile&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                                                        &lt;span class="nl"&gt;completionHandler:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSError&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                                            &lt;span class="c1"&gt;// Once the multipart form is serialized into a temporary file, we can initialize&lt;/span&gt;
                                                            &lt;span class="c1"&gt;// the actual HTTP request using session manager.&lt;/span&gt;
                                                            &lt;span class="n"&gt;_currentTask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_manager&lt;/span&gt; &lt;span class="n"&gt;uploadTaskWithRequest&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;multipartRequest&lt;/span&gt; &lt;span class="n"&gt;fromFile&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSURL&lt;/span&gt; &lt;span class="n"&gt;fileURLWithPath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;finalFile&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="o"&gt;:^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSProgress&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_Nonnull&lt;/span&gt; &lt;span class="n"&gt;uploadProgress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                                                &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;progress = %f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uploadProgress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fractionCompleted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                                                                &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uploadedSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fileItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileSize&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;uploadProgress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fractionCompleted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                                                &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;notifyStateChanged&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                                                            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;completionHandler&lt;/span&gt;&lt;span class="o"&gt;:^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSURLResponse&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_Nonnull&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;id&lt;/span&gt;  &lt;span class="n"&gt;_Nullable&lt;/span&gt; &lt;span class="n"&gt;responseObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSError&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_Nullable&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                                                &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSFileManager&lt;/span&gt; &lt;span class="n"&gt;defaultManager&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;removeItemAtURL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSURL&lt;/span&gt; &lt;span class="n"&gt;fileURLWithPath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;finalFile&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                                                                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                                                    &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Upload image failure......&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;%@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c1"&gt;//                                                                    [[NSFileManager defaultManager] removeItemAtPath:filePath error:nil];//上传失败保留文件下次上传&lt;/span&gt;
                                                                    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;onUploadFailure&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fileItem&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                                                                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                                                    &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Upload image Success......&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;%@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,[[&lt;/span&gt;&lt;span class="n"&gt;_currentTask&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
                                                                    &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Response Data:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;%@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="n"&gt;stringWithData&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;responseObject&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;&lt;span class="c1"&gt;//返回是空&lt;/span&gt;
                                                                    &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSFileManager&lt;/span&gt; &lt;span class="n"&gt;defaultManager&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;removeItemAtPath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;filePath&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                                                                    &lt;span class="n"&gt;Partition&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;partition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;backupPartition&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                                                                    &lt;span class="n"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usedSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSNumber&lt;/span&gt; &lt;span class="n"&gt;numberWithLongLong&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usedSize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;longLongValue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileItem&lt;/span&gt; &lt;span class="n"&gt;getAsset&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;defaultRepresentation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
                                                                    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;onUploadSuccess&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fileItem&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                                                                &lt;span class="p"&gt;}&lt;/span&gt;
                                                            &lt;span class="p"&gt;}];&lt;/span&gt;
                                                            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_currentTask&lt;/span&gt; &lt;span class="n"&gt;resume&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

                                                        &lt;span class="p"&gt;}];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个方式在iOS7及以上的系统都有效，但是在iOS7系统还是有点小问题：上传进度不回调。这。。这。。我无话可说了，所以我项目中iOS7还是只能用ASI来上传。&lt;/p&gt;
&lt;p&gt;后台上传可以了，但是实际测试中貌似上传效率也不高，最主要还是要将所有数据再写入一个文件，这个是硬伤。因为前面导出ASAsset的时候已经临时生成了一个文件，在AFN后台上传的时候再一次写多一个临时文件，这样一次上传就生成了两个临时文件，如果这个文件是个很大的视频，那必然很容易导致磁盘空间不足而失败。&lt;/p&gt;
&lt;p&gt;所以，后台上传看上去很美好的事情，实际过程中却是那么残酷的过程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/AFNetworking/AFNetworking/issues/1398"&gt;AFN issue&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/27154006/how-to-upload-task-in-background-using-afnetworking"&gt;StackOverflow相关问题&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Mon, 02 May 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-05-02:iosxi-tong-xiang-ce-shang-chuan-bu-de-bu-shuo-de-na-xie-shi-er.html</guid><category>iOS网络编程 系统相册上传 导出视频 NSURLConnection NSURLSession 大文件上传 后台上传</category></item><item><title>Android下载器开发</title><link>http://szuwest.github.io/androidxia-zai-qi-kai-fa.html</link><description>&lt;h1&gt;Android下载器开发&lt;/h1&gt;
&lt;p&gt;最近因为项目需要，我开发了一个Android下载管理器，我觉得很有必要记录一下，谈谈我是怎么开发的，遇到了什么问题以及如何解决的。算是一个总结吧。&lt;/p&gt;
&lt;h2&gt;需求分析&lt;/h2&gt;
&lt;p&gt;我们项目包含了一个功能：将文件下载手机上，并且要支持断点下载，因为我们下载的文件主要是图片和视频，其中视频基本上都是大文件，然后下载可能随时会被中断，所以首要一点就是要支持断点续传，然后要支持任务管理，例如暂停下载和继续下载，再然后就是要下载速度尽量快。不过这最后一点估计所有人都会这样要求。&lt;/p&gt;
&lt;h2&gt;为什么要自己开发&lt;/h2&gt;
&lt;p&gt;需求已经较清楚了，然后再看怎么实现。一般来说，像下载这么通用的功能，因为很多开源库可用才对。不过在开始之前我要说明一下，这个功能一开始不是我做的，是另外一个同事负责的，但是他离职了，我来接手。问题在于他离职之前这个功能算是实现了，但是很多问题，例如断点续传有问题，任务管理有问题，下载速度很慢。我接手之后，我特意去网上查找了有没有可用的较好的开源库。经过一轮搜索之后，我发现，很多博客上介绍的下载都是同一下载，就是黎活明老师的下载，估计这个下载是他讲课的案例，主要特点是多线程断点下载。而我们之前那个同事的实现就是把网上的例子弄来的。他这个下载确实还可以，支持断点下载，还支持多线程分片下载来提高下载速度。不足之处就是不支持任务管理，还有数据库很容易出现多线程问题。也就是说核心的东西它有了。如果你要在一个项目中用它，然后还有通过测试同事的各种测试，那是不行的。还有很多工作要做。&lt;/p&gt;
&lt;p&gt;再说说我找库的问题，下载库到是找到了几个，但是发现都有点小问题。例如有一个貌似是阿里巴巴的技术人员写的，支持断点下载和任务管理，但是不支持多线程分块下载。然后我发现很少外国人有写下载库，我的想法是 是不是因为他们的网速比较好，下载文件都比较快，像断点续传和多线程分块下载，任务管理需求也比较少（也比较少下大文件，因为他们不能下载视频）。所以我最终决定自己来实现一个下载器。&lt;/p&gt;
&lt;h1&gt;实现&lt;/h1&gt;
&lt;h3&gt;1断点续传&lt;/h3&gt;
&lt;p&gt;第一个要点是断点续传。这个不难，因为这是HTTP协议支持，通过range这个header字段。这个字段可以指定要从文件的哪个地方开始传，到哪里结束。下载的部分要写入文件，这里用到了一个Java类：RandomAccessFile。这个类你可以指定创建一个指定大小的文件，然后随机读写任何部分。断点下载一个要点就是，在下载之前，我们要先创建一个指定大小的RandomAccessFile文件，然后再把下载下来的部分写入这个文件中。已下载的部分要记录到配置文件或者数据库中，下载要从哪里下载就从配置文件中读取。这里要注意的就是每次将下载部分写入文件的时候，同时也要保存已下载到哪里的信息。这里的额外的保存操作会拖慢一点下载速度，但是为了避免程序被强杀或者突然崩溃导致已下载部分丢失，也只能这么做。如果为了追求速度，可以容易这种异常情况的丢失，这里是可以改进的。&lt;/p&gt;
&lt;h3&gt;多线程分块下载&lt;/h3&gt;
&lt;p&gt;为了加快速度，我们可以将一个大文件分成几块，每块分配一个线程来下载，这样速度就翻倍了。这里就有一个要点：我们将文件分成N块，然后这每一块都按照断点续传来实现。所以基本的下载流程是这样的：首先获取文件的大小，然后在本地创建一个该大小RandomAccessFile文件，然后分成N块来下载，设置好每一块的下载起始位置和结束位置，分配一个线程来下载，而且每一块的下载都要几好下载到哪里，以便以后支持继续下载。要判断文件是不是下载完成了，只要检查每块是不是已经正常下载完成或者已下载的部分就是等于文件大小，就可以了。&lt;/p&gt;
&lt;h3&gt;任务管理&lt;/h3&gt;
&lt;p&gt;任务管理就是你可以随时中断下载，可以创建多个任务，同时可能只支持X个文件进行下载，其他的任务等待。然后失败的任务可以重启，也可以对任务进行删除。这个倒不是很难，但是如果要加入任务优先级，会复杂很多。现在我的实现是没有优先级的，先进先出机制。不过我已预览这个设计，要扩展起来也很容易。任务管理实现起来不难，就是有一个线程池来下载，下载中和等待中的任务加入线程池，当任务被暂停时，如果是正在下载，就cancel掉线程，如果是等待中，就设置cancel标记。删除和暂停差不多，只是要对数据库进行删除操作。这里对正在下载的任务停止有一个要点。有很多人对停止线程掌握的不好。大部分人都知道设置一个布尔标记，当这个标志为true时就不做任务了，这样线程的run方法可以结束了。问题是很多人不知道这个布尔变量是有要求的。我之前的那个同事就犯了个错误。他发现把那个标记设置为true时，线程不能立即结束。他就在线程里加了个sleep方法，然后进入判断这个标示的逻辑。这样做可以起到一点的作用，但是还是不能解决根本问题，而且会导致无需的程序睡眠时间，导致下载速度变慢。解方法很简单，对这个布尔值变量声明时用volatile修饰就可以了，而且不用在线程里sleep。&lt;/p&gt;
&lt;h3&gt;遇到的问题&lt;/h3&gt;
&lt;p&gt;前面说了前同事的实现有问题，断点下载有问题，我检查代码时发现是因为它的数据库有问题，下载的时候没有把已下载的进度写到数据库。他采用的一个数据库框架叫litepal。这是一个对象型数据库，我并不反对用框架，就沿用了他的做法，修改了他的bug。然后修改了他停止线程的bug，基本上就能实现断点续传的功能，并且因为线程少了sleep方法，速度有了明显提升。&lt;/p&gt;
&lt;h4&gt;对速度提升的优化&lt;/h4&gt;
&lt;p&gt;经我的研究，下载速度主要受限于网络，还有下载你设置的缓冲区buffer的大小。当然网络是前提，网络不好，你设置的下载buffer再大也没有用。但是我们的应用因为是局域网内，网络不是问题。所以这个时候buffer的大小就起作用了。当初我看很多的下载例子他们设置的buffer是8KB,我跟其他讨论之后，设置512KB的大小，速度果然提升不小。然后我们配置了每个文件分两块进行下载，总速度可达10MB每秒。如果还有提升的话，可以再加大这个buffer，还可以从优化每个线程下载时写文件之后更新数据库那个操作。&lt;/p&gt;
&lt;h4&gt;HTTP协议content-length问题&lt;/h4&gt;
&lt;p&gt;测试同事发现下载大文件有问题。我一看那个失败的文件是超过2GB。第一反应是是不是整数溢出。因为Java中int类型是不超过2GB的（Java的都是有符号数）。我一看在获取文件大小的时候，协议返回的竟然是0，然后发现Android的HTTP协议getContentLength返回的是一个int类型！。我通过断点调试发现服务器返回的协议的文件大小是正确的，只是在经过getContentLength获取的值就变了，因为溢出了。所以我改成自己去从header里解析这个contentLength。这下获取的文件大小就正常了。&lt;/p&gt;
&lt;h4&gt;Android4.4系统写大文件bug&lt;/h4&gt;
&lt;p&gt;改正了getContentLength的问题后，下载还是失败，我就纳闷了。然后跟踪发现异常发生在RandomAccessFile的setLength方法。我就到网上搜这个异常，找了很多终于在Google groud发现有人也遇到这个问题，说事Android4.4系统的一个bug。Google的人也回应了，是在SD卡相关的类中的一个bug，没有用的是32位的方法，他们已修复这个bug。搞了半天，原来是系统的bug，然后我然测试同事测试了替他系统，都没有问题，确实只有4.4才有。而且发现了更奇怪的问题，下载4GB的文件竟然可以！我至今还没搞清楚这是啥原因。知道是系统问题后，将这个问题先是放了一段时间，后来我想不能下载对用户来说确实不好，有没有什么办法可以绕过这个bug。所以我针对这一种特殊的情况，采用另外一种写文件的方式，用FileChannel来建立一个指定大小的文件，这种方法比RandomAccessFile的setContentLen方法效率低很多，但是总比不能用好吧。至此这个bug告一段落。&lt;/p&gt;
&lt;h4&gt;其他问题&lt;/h4&gt;
&lt;p&gt;我们在下载文件之前是先要在磁盘创建一个同样大小的文件，然后下载时就是写入到这个文件中。如果你要下载A.MOV文件，网上的很多下载例子都是直接建立一个A.MOV文件。这样是不好的，因为如果用户用别的文件管理应用去查看文件的时候，看到这个文件就想消费，可实际上这个文件可能根本没有下载完，是消费不了的。所以通常的做法就是开始创建的是A.MOV.TMP文件，等真正下载完之后再重命名为A.MOV。&lt;/p&gt;
&lt;p&gt;还有另外一个问题就是，测试同学很喜欢做压力测试，他们会疯狂下载文件，最终磁盘满了，就出现问题了。虽然我一早就做了错误提示，也定义各种可能出现的错误提示。但是有些系统在SD卡满了之后会卡死，特别是小米的系统。我一开始以为是我的程序问题造成系统卡死，经过研究之后我发现是系统问题，而且不同的系统不同反应。我测试发现一般留足20MB空间就不会有太大的问题。所以在每次问下下载之前，我都检查一下是否有足够的空间可以下载，这里预留了额外的20MB空间。&lt;/p&gt;
&lt;h1&gt;总结&lt;/h1&gt;
&lt;p&gt;这一次写下载器给我的收获很多。从前同事的一堆烂摊子开始，bug无数，到我接手之后功能完善，各种bug解决，我自己还是比较满意的。我觉得你做事的态度决定了你能把事情做成怎样。不过这个库也还有其他问题，例如还没有任务优先级，速度应该还可以提升。现在暂时够用，就告一段落了。我已经将这块独立成一个库，放到了github上面。希望有需要的人可以用它，并且改善它。&lt;/p&gt;
&lt;p&gt;以下是github地址，欢迎使用。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/szuwest/DownloadLib"&gt;Android Downlaoder&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 18 Jul 2015 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2015-07-18:androidxia-zai-qi-kai-fa.html</guid><category>Android Download</category></item><item><title>再谈iOS开发和Android开发之间的切换</title><link>http://szuwest.github.io/zai-tan-ioskai-fa-he-androidkai-fa-zhi-jian-de-qie-huan.html</link><description>&lt;h1&gt;再谈iOS开发和Android开发之间的切换&lt;/h1&gt;
&lt;p&gt;由于项目变化的原因，Android开发增加了很多人手，而iOS开发团队又被调走，只留下了两个人。所以iOS开发负责人找我谈话希望我过去帮忙做iOS。出于对项目整体进度而言，我去帮忙iOS开发是最好的。我可以在iOS和Android开发之间随意切换，而Android开发确实有点多人，iOS人手严重不足，招人很难，其他人转iOS开发也需要时间，所以我就答应了。&lt;/p&gt;
&lt;p&gt;说起我的Android和开发经历，真是很多感概。从我决定离开第一家做芯片的公司开始，我就想进入iOS开发或者Android开发。其实我最开始是想做iOS开发的，但是当时很难找，我不但没有经验，还是从一家芯片公司刚跳出来（虽然我是软件工程专业出身，但是一开始却进入了芯片行业，说多了都是泪）。最终一家小公司接受了我做Android开发，那时候是2011年初。但是做了大半年多的Android开发之后，公司发现Android很难赚钱，就想转做iOS开发，因为它的生态环境好。开始是我们老大去做，但是他搞了半天还没搞出个helloworld列子，所以就让我去做了。由于我大学的时候就学过Object-C，也接触Object-C开发，所以很快就上手了。再后来，苦于小公司技术进步慢，就跳槽来了现在的X公司。&lt;/p&gt;
&lt;p&gt;我是以Android技术面进入X公司的，但是进来之后，我的老大跟我说，你想做Android还是iOS开发，因为我本身也在做iOS开发，也像往这个方向，就选了iOS开发。那个时候，项目采用的方式全编码方式，没有用xib，然后那个时候还是MRC。想想那个时候那种方式还真是学到了不少东西。但是又是做了大半年之后，iOS项目没有了，Android的项目反而很紧张，我们整个团队就转去做Android开发了。。。当时整个团队只有我懂Android开发。X公司的基因就是这样子，随意切换和调动团队的开发方向和项目。这么多年了，我算经历了几次这种转换。&lt;/p&gt;
&lt;p&gt;转做Android开发之后没有多久，我就出来加入了一个创业公司，在创业公司负责Android项目的重构与开发。这次重构与开发由我独自一人操刀，所以收获还是挺大的。不过一年之后，我最终还是离开了那个创业公司，我留下的框架我觉得够他们迭代两个大版本了。前段时间我看了他们最新的版本，整体架构还是没有太大变化，我觉得我那个架构还在支撑他们。离开创业公司之后，我又回到了X公司。&lt;/p&gt;
&lt;p&gt;回到X公司，我也可以选择方向。因为当时的项目是将公司的通用的公共业务封装成SDK来给各个项目用。Android的SDK已经有团队在做并且做得差不多了。而iOS的因为我们想做跨平台的，所以用c++来做SDK，然后再封装一个Object—C的接口给iOS用。而c++这边很缺人，我就加入了。因为我很愿意写C++，想挑战一下自己。大概写了一个多月的C++，也封装了Object-C接口，我们写的SDK马上用到了项目中。因为有一个iOS项目功能很庞大，他们要用我们的SDK，并且我加入了他们项目，我又转入了iOS开发。我自己写c++SDK，然后写Object-C接口转接，然后直接用到项目中，一条龙我都做了。实际上，我很喜欢写c++那一个多月，我学到了很多东西，对c++有了进一步的了解和有了c++和Object-C混合编程经验。&lt;/p&gt;
&lt;p&gt;然后又做了大半年iOS的项目，这个项目突然解散了，失败了。大部分的人员离职，原来的项目经理重组项目，吸取经验教训，小团队作战。他的想法是组织小部分人来重做项目，开始只做Android端。而当时留下来的人不多，而且项目经理只想要精英。他们找到了我。说实话，不大不小的X公司，我还真没发现有几个Android开发经验丰富和技术真的很好的。以前我刚来X公司的时候的那个团队，已经基本都离开了，他们都去大公司或创业。我绝对是团队了的Android经验最丰富和技术比较好的人。刚死掉的项目的Android端烂得我都不忍心看。新项目我加入了Android开发。&lt;/p&gt;
&lt;p&gt;新项目的Android开发整个框架，有大部分是我搭建的，UI部分估计有90%是我写的。使用起来体验还不错，也得到了一些人的认可和赞赏。但是整个项目有些地方我还是不太满意，特别是项目package的命名和划分，因为这个最开始不是我做的。我又不能进行大改动，只好忍了。这留下了隐患。&lt;/p&gt;
&lt;p&gt;又做了大半年，公司决定将这个项目升级，跟另外一个公司战略产品合并，形成一个新项目。也就是现在这个项目。我又转入了iOS开发，到今天为止，也有半个月了。实际上，在项目合并之前，老项目的iOS本的项目工程和基础架构是我建的。我当时是参考了Android的框架并改良了来做的。搭好框架之后，因为有新的团队进来接手，我就转交给他们了。可是现在我一看，原来的框架只留下了一点，很多都被干掉了。我当时搭建框架确实有点大，那是因为我考虑到了之后的业务和功能来做的。但是我估计是因为iOS负责人不了解我们项目的整体规划，看着我搭框架层次有点多，就简化了。这一简化就使得框架的可扩展行大大降低，现在要做新业务了，我觉得再这个被阉掉的框架上不好做。。而且我还发现这里面代码很多重复的，同一个协议竟然在不同的模块都实现了，而且是完全没有必要的那种。这说明开发人员之间沟通不多，都是各干各的。另外一个就是这个项目框架有问题，协议的时候竟然不是专门集中在一个地方，大家各自实现，重复了也不知道。如果项目结构划分得好话，有专门的groud,有什么协议已实现了一目了然。项目负责人不作为也脱不了干系。&lt;/p&gt;
&lt;p&gt;因为项目问题，我偶尔还会打开Android的项目来做参考。我发现新加入开发者后，项目被搞得面目全非。每个新人可能觉得老项目有些地方看着不爽，都想自己重新实现一遍。改的最恐怖的是协议层，这个开始由别人搭建的。UI层变动得还好，因为这个是完全是我搭建的，模块划分失败清楚，命名也还好，大家都遵循。协议层开始我们都是自己写得框架，新人一来，他们非常不爽。在最初项目开始的时候，我也有点不爽协议层的这种实现，但是我认为换成别的框架也不见得有多好，并且做项目要考虑时间成本和其他的学习成本。我就保留了。但是新加入的其他同事他们觉得不爽，就想换成Volley，然后还有人说要用Retrofit，还要用EventBus。原来的项目数据库用得少，他们又加入了GreenDao之类的，有人要用注解。其实用这些新框架新技术我并不反对，我没想到他们会这么热衷用。有些用了框架确实省了事，可是我看到有些用了框架之后代码结构一团糟，我有点受不了。&lt;/p&gt;
&lt;p&gt;才半个多月，我就已经不太能认出这个项目的框架了。。我发现技术人员都是很自我，看到不爽的功能每个人都想自己来实现一把。我觉得成熟成技术人和普通技术人员的一个重要区别是：当加入一个新项目的时候，他要实现一个功能或者方法，他们去该项目中是不是已经有实现，有的话就直接拿来用，或者扩展它。还有他会尽量去适应新项目的代码风格，不是不管三七二十一就用自己的风格。我觉得每个人都能这么想这么做的话，代码管理会变得容易很多。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;本来我是想写iOS和Android开发的技术心得，写着就变成了吐槽。。。我想说的是经历这多iOS开发和Android开发切换之后，我对Android开发和iOS开发有了较大的提升，以前我基本上比较看好iOS开发的，但是现在我觉得这两者并没有本质的却别，iOS开发是生态环境比较好，但是Android开发也有很多好处。IDE的话Android studio也越来越好。至于Java和Object-C语言，各有优劣。Java的优势之一是它很好做框架，也有很多开源库支持。Object-C的缺点是它没有命名空间和没有泛型，这导致一个不好就是文件名和方法名很长。当然Object-C也有很多好处。&lt;/p&gt;
&lt;p&gt;项目的架构其实很重要，一个好的架构可以让参与其中的开发人员很乐意按照其中的规则办事，反之就会很乱，可能有很多重复代码，后面的项目变大之后扩展很困难。 &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 18 Jul 2015 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2015-07-18:zai-tan-ioskai-fa-he-androidkai-fa-zhi-jian-de-qie-huan.html</guid><category>Android iOS</category></item><item><title>Android图片缓存和相关开源项目</title><link>http://szuwest.github.io/androidtu-pian-huan-cun-he-xiang-guan-kai-yuan-xiang-mu.html</link><description>&lt;h1&gt;Android图片缓存和相关开源项目&lt;/h1&gt;
&lt;p&gt;现在几乎所有大一点的Android项目都会用到图片缓存。而Android应用的内存占用大户就是图片，几乎所有内存问题都会涉及到图片问题，而已图片为主的应用也会涉及到性能问题。我觉得每一个资深的Android工程师都要对图片缓存技术有所了解，并且有自己想法。图片缓存是在面试别人时必问的问题。&lt;/p&gt;
&lt;p&gt;图片缓存可以分为两点：内存缓存和磁盘缓存，当然还有必然要涉及的图片解码，图片下载，这里主要讲讲内存缓存和磁盘缓存，附带说一下图片解码和下载。&lt;/p&gt;
&lt;h2&gt;内存缓存&lt;/h2&gt;
&lt;p&gt;由于一张图片基本上会被重用或者在多个界面显示，而图片的下载和解码都是比较耗时的动作，要给用户比较好的体验，将一张图片缓存在内存中就尤为必要。如果一个应用图片比较多，要将所有图片都缓存在内存中显然不现实，特别是比较低端的机器上，内存非常有限。所以这个内存缓存必然有所限制，那么问题来了，缓存池设置多大，并且满了之后怎么处理成了要点。我们知道Android系统中给每个应用设置了最大堆，超出了这个最大堆限制就会报OutOfMemory错误。所以一般就是根据这个最大堆来设置图片缓存池的大小，业内普遍做法是取最大堆内存的8分之一，这个经验值，我觉得可以应用情况做调整。而缓存池满了之后该又要加入新的图片，怎么对已在池中的图片移除，有很多方法。最常用的是LRU（least recently used）算法。我一般会问面试者这个算法是怎么实现的，看过代码的人或者算法学得比较好的人就能答出。还有用的比较多大算法是使用频率算法，移除最大图片算法等。然而我认为比较好的内存缓存技术还应结合弱引用来用。这里涉及到什么事强引用，软引用和弱引用也是我必考项。为什么还要结合弱引用来使用比较好呢？如果一个应用要显示的图片比较多，而强引用池又比较小，那么强应用池中的图片可能很快被移除，但是这时这张图片又还在某个界面中显示着，然后在一个新的界面中又要显示同一张图片，这时强引用池中已被移除，它就会重新去磁盘或网络中加载。而有弱引用池的话就可以避免这个问题。&lt;/p&gt;
&lt;p&gt;内存缓存还有一个要注意的问题就是图片的解码和重用。例如说一张超大图片的话解码是不能直接解码到内存中的，还有可能要根据图片最终在界面上显示的大小来进行解码，还有就是针对不需要alpha值的图片采用RGB_565来解码，对一张已解码的不再需要图片内存重复利用起来，不用重新开辟内存，这些就是非常细但是很重要的点。&lt;/p&gt;
&lt;h2&gt;磁盘缓存&lt;/h2&gt;
&lt;p&gt;磁盘缓存主要是针对网络图片，因为网络下载是比较耗时，对于已经下载的图片没有必要再下载一次。磁盘缓存主要涉及图片保存和磁盘缓存空间大小问题。图片从网络下载下来时，以什么文件保存，还有要不要对图片质量进行压缩也是讲究的。普遍做法是将图片的URL进行一次hash，将这个hash字符串作为文件名保存起来。下次只要对某个图片URL计算出它的hash字符串，看看对应的文件存不存在，就知道图片是否已存在磁盘缓存里。由于用户的磁盘也不是无限的，对于已图片为为主的应用，是要考虑对这个磁盘缓存空间做限制的。这里同样也有LRU算法等。&lt;/p&gt;
&lt;h2&gt;多线程问题&lt;/h2&gt;
&lt;p&gt;对于多图片的应用，特别是在ListView或GridView中显示图片的应用来说，多线程加载图片是必然涉及的。因为图片不能在主线程中解码，否者在滑动列表的会被卡死。解码图片和下载图片都是很耗时的动作，必须放在子线程中进行。如何做一个滑动起来很流畅的图片列表，也是我必问的问题。这里可以涉及很多知识就不讲了。但是在图片加载环节，必然要考虑采用一个线程池来加载和解码图片。&lt;/p&gt;
&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;图片的加载和缓存是一个很复杂的问题，如果这些都要自己写，要考虑东西很多，要做得好相当不容易。想起在&lt;/span&gt;&lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="err"&gt;年的时候，那个时候开源项目还没有现在那么多，我们就是自己写的。但是现在基本上不自己写了，因为有很多相关的优秀的开源项目可以采用。我只要选一个开源框架，加一些配置，或者根据自己项目的需要进行改写或者改造就行了。这里最受欢迎的开源项目应该是&lt;/span&gt;&lt;span class="n"&gt;Universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Loader&lt;/span&gt;&lt;span class="err"&gt;了，其他用得比较多的还有&lt;/span&gt;&lt;span class="n"&gt;glide&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IoUtils&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Volley&lt;/span&gt;&lt;span class="err"&gt;等，还有&lt;/span&gt;&lt;span class="n"&gt;Facebook&lt;/span&gt;&lt;span class="err"&gt;最近开源的&lt;/span&gt;&lt;span class="n"&gt;Fresco&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Universal-Image-Loader&lt;/h2&gt;
&lt;p&gt;UIL&lt;a href="https://github.com/nostra13/Android-Universal-Image-Loader"&gt;github地址&lt;/a&gt;是我正在用的图片缓存开源项目。这是一个很优秀的项目，代码结构很好，配置性非常高，非常灵活，使用也非常简单。这也许就是它流行的原因。来看看它的经典结构：&lt;/p&gt;
&lt;p&gt;&lt;img alt="框架图" src="https://github.com/nostra13/Android-Universal-Image-Loader/raw/master/wiki/UIL_Flow.png" /&gt;&lt;/p&gt;
&lt;p&gt;有人将这种结构称为三级缓存（内存缓存，磁盘缓存，网络缓存？），UIL的结构很清晰，也很经典。我觉得其他图片缓存框架也是大同小异。我已在至少两个项目用这个框架了，不过我都有修改。第一项目中因为我们的图片下载是要经过安全校验的，所以我在UIL的download engine里加入了一个回调，通过回调获取校验的参数，然后设置到cookie中，ImageLoader不用关心校验方法。现在这个项目也在用UIL，由于我们项目的特殊性，对UIL做了更多改动。不过UIL框架很灵活，很好改动。这就是开源项目好处，我们站在巨人们的肩膀上。&lt;/p&gt;
&lt;p&gt;虽然好处多多，但是我发现UIL也有不足之处。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;框架太过灵活，相对的性能降低了。&lt;/li&gt;
&lt;li&gt;不支持gif图片解码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一个算不上太大问题，但是对于追求高效率的应用来说，特别是GridView中，用UIL会有性能影响。因为UIL的每次调用都创建很多对象，有些对象因为最求框架灵活引入的，实际是可以减少的。第二个是硬伤，不过现在支持框很少。貌似只有Facebook新开源的Fresco。&lt;/p&gt;
&lt;h2&gt;Fresco&lt;/h2&gt;
&lt;p&gt;Fresco是Facebook刚开源不就的项目，我看了它的介绍非常兴奋。首先它解决UIL不支持gif图片解码的问题。然后它对图片进行重用，还有它的解码是在native中的，内存效率非常高。我最近非常想试试这个新框架。不过实在太忙没有时间。我打算找个时间研究一下它，并用它替换掉UIL。&lt;/p&gt;
&lt;p&gt;先说到这吧，我也翻译这个项目官方介绍的那篇博客，再说。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 16 May 2015 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2015-05-16:androidtu-pian-huan-cun-he-xiang-guan-kai-yuan-xiang-mu.html</guid><category>Android源码学习 图片缓存 ImageLoader Fresco</category></item><item><title>Android开发中何时使用多进程？</title><link>http://szuwest.github.io/androidkai-fa-zhong-he-shi-shi-yong-duo-jin-cheng.html</link><description>&lt;h1&gt;问答-Android开发中何时使用多进程？&lt;/h1&gt;
&lt;p&gt;我在github上回答了一个问题：
&lt;code&gt;Android开发中何时使用多进程？&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="err"&gt;要想知道如何使用多进程，先要知道&lt;/span&gt;&lt;span class="n"&gt;Android&lt;/span&gt;&lt;span class="err"&gt;里的多进程概念。一般情况下，一个应用程序就是一个进程，这个进程名称就是应用程序包名。我们知道进程是系统分配资源和调度的基本单位，所以每个进程都有自己独立的资源和内存空间，别的进程是不能任意访问其他进程的内存和资源的。那如何让自己的应用拥有多个进程？很简单，我们的四大组件在&lt;/span&gt;&lt;span class="n"&gt;AndroidManifest&lt;/span&gt;&lt;span class="err"&gt;文件中注册的时候，有个属性是&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="err"&gt;，这里可以指定组件的所处的进程。默认就是应用的主进程。指定为别的进程之后，系统在启动这个组件的时候，就先创建（如果还没创建的话）这个进程，然后再创建该组件。你可以重载&lt;/span&gt;&lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="err"&gt;类的&lt;/span&gt;&lt;span class="n"&gt;onCreate&lt;/span&gt;&lt;span class="err"&gt;方法，打印出它的进程名称，就可以清楚的看见了。再设置&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="err"&gt;属性时候，有个地方需要注意：如果是&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:deamon&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;，以&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;开头的名字，则表示这是一个应用程序的私有进程，否则它是一个全局进程。私有进程的进程名称是会在冒号前自动加上包名，而全局进程则不会。一般我们都是有私有进程，很少使用全局进程。他们的具体区别不知道有没有谁能补充一下。&lt;/span&gt;

&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="err"&gt;使用多进程显而易见的好处就是分担主进程的内存压力。我们的应用越做越大，内存越来越多，将一些独立的组件放到不同的进程，它就不占用主进程的内存空间了。当然还有其他好处，有心人会发现&lt;/span&gt;&lt;span class="n"&gt;Android&lt;/span&gt;&lt;span class="err"&gt;后台进程里有很多应用是多个进程的，因为它们要常驻后台，特别是即时通讯或者社交应用，不过现在多进程已经被用烂了。典型用法是在启动一个不可见的轻量级私有进程，在后台收发消息，或者做一些耗时的事情，或者开机启动这个进程，然后做监听等。还有就是防止主进程被杀守护进程，守护进程和主进程之间相互监视，有一方被杀就重新启动它。应该还有还有其他好处，这里就不多说了。&lt;/span&gt;

&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="err"&gt;坏处的话，多占用了系统的空间，大家都这么用的话系统内存很容易占满而导致卡顿。消耗用户的电量。应用程序架构会变复杂，应为要处理多进程之间的通信。这里又是另外一个问题了。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;详见：&lt;a href="https://github.com/android-cn/interview-questions/issues/7"&gt;问答-Android开发中何时使用多进程？&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Tue, 10 Mar 2015 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2015-03-10:androidkai-fa-zhong-he-shi-shi-yong-duo-jin-cheng.html</guid><category>技术问答 github 进程</category></item><item><title>Android源码学习之ViewGroup</title><link>http://szuwest.github.io/androidyuan-ma-xue-xi-zhi-viewgroup.html</link><description>&lt;h1&gt;Android源码学习之ViewGroup&lt;/h1&gt;
&lt;p&gt;android继承于View，同时它包含了一个View数组存储它的子View，也就是说它是一个容器。这就是经典的设计模式中的组合模式。在Android的视图结构中，容器一定是ViewGroup，只有ViewGroup才能包含其他视图，像TextView，ImageView这些View是不能包含子视图的，它们是单一控件。这一点跟iOS的视图结构很不一样的。在iOS中所有的视图都是继承于UIView，同时UIView也是一个容器，能包含其他UIView。从这一点来说iOS的视图结构更简单。&lt;/p&gt;
&lt;p&gt;是什么使得ViewGroup具有了容易功能呢？ViewGroup除了继承View外，还是实现了两个接口：&lt;code&gt;ViewManager&lt;/code&gt;和&lt;code&gt;ViewParent&lt;/code&gt;。ViewManager主要定义了addView和removeView的方法，ViewParent主要定义了刷新容器的接口requestLayout和其他一些焦点事件的处理等接口。除此之外，还有非常重要的一点，ViewGroup是一个抽象类。我们知道View并不是抽象类，为什么ViewGroup继承了View反而成了抽象类呢，是增加了什么新的抽象方法吗？不是，ViewGroup中的抽象方法是继承于View的onLayout方法。onLayout方法在View中并不是抽象方法，只是一个空方法，但是在ViewGroup中它被定义为了抽象方法。我第一次发现原来还可以这样做。onLayout的主要作用是放置子View的位置，而不同的布局方式算法不一样，所有留给子类实现比较合理。&lt;/p&gt;
&lt;p&gt;ViewGroup中并没有覆盖onMeasure方法，但是增加了一些计算子View大小的方法：measureChildren方法就是将所有的子View都遍历一遍，并调用他们的measure方法。ViewGroup中同样没有覆盖onDraw方法，但是覆盖了dispatchDraw方法。dispatchDraw方法主要作用是调用每个子View的draw方法。看来onXXX方法在ViewGroup中并不重要，它更多的在调用子View的方法。&lt;/p&gt;
&lt;h2&gt;LayoutParams&lt;/h2&gt;
&lt;p&gt;布局参数LayoutParams是ViewGroup的一个重要内部类。我们在做布局时必不可少的两个属性就是这个类的属性：width和height。程序运行时任何一个控件都有这两个值，当然就是必不可少。LayoutParams这个类非常简单，处理width和height，还有一个LayoutAnimationController.AnimationParameters 属性，用于布局动画的。几乎所有的ViewGroup类的子类都有自己的内部类LayoutParam，但是他们都不是直接继承于LayoutParams，而是MarginLayoutParams，MarginLayoutParams同样是ViewGroup的内部类。MarginLayoutParams无非就是加入了各个方向的margin，这个很好理解，我们布局时都是带margin的。初学者开始搞不懂margin和padding的区别。其实只要记住margin是不属于View的空间的，它是用于每个View与父View或者兄弟View之前的间距，而padding是属于View内部空间的，是View自己的内容跟View边框之间的间距。从代码角度来看，padding是View的属性，LayoutParams是ViewGroup的属性。&lt;/p&gt;
&lt;h2&gt;dispatchTouchEvent触摸事件的分发&lt;/h2&gt;
&lt;p&gt;基本上我每次面试别人，事件的分发是我必问的问题。这个其实没什么难的，网上很多资料说这个，但是看没看过源代码的人看他的回答基本就能知道。Android的触摸事件分发是自上而下的，是通过dispatchTouchEvent来分发的。ViewGroup的dispatchTouchEvent方法还是挺复杂的。ViewGroup在分发事件给子View前，会先调用自身的onInterceptTouchEvent方法来判断自己是否要拦截掉事件，如果拦截了则不会再分发给子View了。没有拦截的话就会在自己的子View中寻找事件接收者，并且组成一个TouchTarget链表，将事件传给他们处理（dispatchTransformedTouchEvent）。简而言之，ViewGroup在分发触摸事件之前会先看自己是否要拦截该事件，不拦截的话在子View中寻找没有隐藏并且在触摸点范围内的子View，将能处理这个事件的加入TouchTarget链表，分发事件给他们处理。我一般面试会问触摸事件会涉及哪些方法，每个方法大概做了什么，哪些是ViewGroup的方法，哪些是View的方法。只要能答出有dispatchTouchEvent， onInterceptTouchEvent，onTouchEvent方法，onInterceptTouchEvent是ViewGroup独有的方法，其他两个是View的方法 就过关。能说明如果一个View设置了OnTouchEventListener，就先调用OnTouchEventListener的回调更好。&lt;/p&gt;
&lt;h2&gt;自定义ViewGroup&lt;/h2&gt;
&lt;p&gt;自定义ViewGroup的需求比较少。一般将已有的ViewGroup子类做组合基本足够。不过真要自定义的话，至少知道该怎么做。必须重写的方法是onLayout方法。这个方法就是对子View布局，即放在哪里。还有一个一般都要重写的方法是onMeasure方法。View的onMeasure比较简单，但是要布局类的话，需要自上而下来计算子View的大小，然后才能在onLayout中根据子View的大小放置。还有可能要重写的是dispatchDraw和drawChild方法。当然跟根据需求可能对dispatchTouchEvent重写。&lt;/p&gt;
&lt;p&gt;关于ViewGroup就先写到这吧。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Mon, 02 Feb 2015 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2015-02-02:androidyuan-ma-xue-xi-zhi-viewgroup.html</guid><category>Android源码学习 ViewGroup</category></item><item><title>股票投资总结</title><link>http://szuwest.github.io/gu-piao-tou-zi-zong-jie.html</link><description>&lt;h1&gt;股票投资总结&lt;/h1&gt;
&lt;p&gt;自从  去年从8月份开始入市美股，11月中入市A股，后来入市港股，真是认识到股市的钱真不是那么容易赚的。为什么很多人劝说不要踏入股市，为什么股市是一赢二平七输，都是很有道理的。要想通过股市一夜暴富也是基本不可能。不过不管怎样，学一下理财和投资，还是不错的。这也算是为以后铺路。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 01 Feb 2015 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2015-02-01:gu-piao-tou-zi-zong-jie.html</guid><category>生活 投资</category></item><item><title>Android源码学习系列开篇</title><link>http://szuwest.github.io/androidyuan-ma-xue-xi-xi-lie-kai-pian.html</link><description>&lt;h1&gt;Android源码学习开篇&lt;/h1&gt;
&lt;p&gt;最近一直觉得自己后劲不足，很多想做的效果都觉得很艰难，不知道怎么下手。从很早的时候我就想学习Android源代码。第一次下载Android的源代码是2011年四季度的时候，那时候在公司的电脑上安装了Linux系统，也把源码下载下来了。但是后来一段时间后，我离开那个公司。后来几年时间都没有下过Android源码，因为一直在Android和iOS直接切换开发。不过我确实下载了Android SDK源码。其实一般的应用开发只要了解Android SDK开发就够。这些年断断续续看过一些SDK的源码。&lt;/p&gt;
&lt;p&gt;这段时间，我终于下定决心要好好学习一下Android源码，原因之一是我拥有了一部自己的MacBook Pro，不再为电脑而烦恼。为了下载Android源代码，我试了很多方法下载，人生第一次为软件付费，买了一个VPN。但是我电脑硬盘比较小，源码很大，我下载了好几次要么下载到一部分就中断了没法继续下载，要么是我的电脑磁盘装不下。。最后我还是在百度网盘下载了一个别人已经下载好的。&lt;/p&gt;
&lt;p&gt;当然我的学习还是以framework的源码为主，然后逐渐往底层学习。要学习framework根本不必下载Android源码，直接下载Android SDK的源码就行，Google提供的SDK Manager就有下载源码功能，然后在Eclipse或者Android Studio关联即可。为了鞭策自己学习，我决定写一个自己Android源码学习系列文章，记录自己的学习心得。另外最近作为面试官，面了一些Android的求职者，感觉很多人都是满足实现功能，不能自己去探究实现原理。想当年自己也是这样。越早摆脱这种情况，越有优势。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 20 Dec 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-12-20:androidyuan-ma-xue-xi-xi-lie-kai-pian.html</guid><category>Android源码学习</category></item><item><title>Android源码学习之View</title><link>http://szuwest.github.io/androidyuan-ma-xue-xi-zhi-view.html</link><description>&lt;h1&gt;Android源码学习之View&lt;/h1&gt;
&lt;p&gt;在Android中，View是所有视图控件的基类。Android的视图控件的设计采用了经典的设计模式--组合模式。View是基础控件，而ViewGroup是可以包含子View和管理子View的空间，ViewGroup同时也是一个View。这跟iOS的视图空间设计有很大不同。在iOS的视图框架中，所有视图都是继承UIView,而UIView本身是可以包含和管理子UIView的。我不知道这两种设计有什么优劣，感觉iOS的设计更简单直接。&lt;/p&gt;
&lt;p&gt;View的源代码超过2万行，当然包括了很多注释。这里面定义了很多基本的方法，主要是视图渲染的相关方法和事件的相关方法，不过有一点我不是很明白的就是里面有不少是根scrollbar相关的方法。我们实际应用中貌似有scrollbar的控件貌似只有AdapterView的子控件，ScrollView和TextView，scrollbar的特性为什么不直接放到这些类中，或者专门为这些类专门建立一个父类来处理scrollbar。View中的scrollbar特性应该大部分视图控件都不需要吧。当然这些只是我的疑问罢了，Google这样设计也许有他的道理。&lt;/p&gt;
&lt;h2&gt;重要方法&lt;/h2&gt;
&lt;p&gt;一个View要渲染到屏幕上，有几个重要的方法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;onMeasure系方法&lt;/li&gt;
&lt;li&gt;onLayout系方法&lt;/li&gt;
&lt;li&gt;onDraw系方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3&gt;onMeasure系方法&lt;/h3&gt;
&lt;p&gt;每一个onXXX方法又有若干个相关XXX方法。例如onMeasure方法，相关的方法是measure(int widthMeasureSpec, int heightMeasureSpec)方法，setMeasuredDimension(int measuredWidth, int measuredHeight)方法，MeasureSpec内部类。其中measure(int widthMeasureSpec, int heightMeasureSpec)是final方法，由系统调用，这个方法会调用onMeasure方法，这个方法需要子类覆盖实现来计算本身的大小，而且覆盖这个方法的时候必须调用setMeasuredDimension方法。这里跟计算大小相关密切的是MeasureSpec内部类，这里要结合ViewGroup类讲解才比较清楚。View中这个相关方法的实现是比较简单的，更多定义一个框架，需要子类自己定制实现。我之前总是搞不太清这些方法的关系，看这篇 &lt;a href="http://blog.csdn.net/a396901990/article/details/36475213"&gt;ANDROID自定义视图——onMeasure，MeasureSpec源码 流程 思路详解&lt;/a&gt;才比较清楚。这个我在ViewGroup学习中再讲。简单来讲View通过onMeasure来确定自己的大小。&lt;/p&gt;
&lt;h3&gt;onLayout系方法&lt;/h3&gt;
&lt;p&gt;onLayout(boolean changed, int left, int top, int right, int bottom)方法在View中是一个空实现，子类需要自己覆盖。跟这个类密切相关的方法是layout(int l, int t, int r, int b)方法，这个给外部调用的，一般是父控件来给它设定位置。还有setFrame(int left, int top, int right, int bottom) 和 onSizeChanged(int w, int h, int oldw, int oldh)方法。onSizeChanged(int w, int h, int oldw, int oldh）方法也是一个空方法。onLayout方法我用的比较少，一般貌似在需要动态滚动视图时用这个方法比较多。以后加深学习这个方法。&lt;/p&gt;
&lt;h3&gt;onDraw系方法&lt;/h3&gt;
&lt;p&gt;onDraw方法也是一个空实现。一般来说这个方法用得比较多，大家都知道要自定义View就需要重载这个方法。一开始我很奇怪，既然View的onDraw方法是空实现，而我经常用View来做一些线控件，即给View设置一个背景颜色，宽或者高设置为1像素。那它的背景是怎么画上去的？答案是在draw(Canvas canvas)方法中画的。onDraw系方法还有draw(Canvas canvas, ViewGroup parent, long drawingTime)方法，dispatchDraw(Canvas canvas)方法。dispatchDraw(Canvas canvas)方式是空实现，而draw(Canvas canvas, ViewGroup parent, long drawingTime)的实现相当复杂，这两个方法都是由ViewGroup来调用的。真正的重头戏在draw(Canvas canvas)方法中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * Manually render this view (and all of its children) to the   given Canvas.&lt;/span&gt;
&lt;span class="cm"&gt; * The view must have already done a full layout before this function is&lt;/span&gt;
&lt;span class="cm"&gt; * called.  When implementing a view, implement&lt;/span&gt;
&lt;span class="cm"&gt; * {@link #onDraw(android.graphics.Canvas)} instead of overriding this method.&lt;/span&gt;
&lt;span class="cm"&gt; * If you do need to override this method, call the superclass version.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * @param canvas The Canvas to which the View is rendered.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Canvas&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;privateFlags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mPrivateFlags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt; &lt;span class="nx"&gt;dirtyOpaque&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;privateFlags&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;PFLAG_DIRTY_MASK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;PFLAG_DIRTY_OPAQUE&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mAttachInfo&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;mAttachInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mIgnoreDirtyState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;mPrivateFlags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;privateFlags&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nx"&gt;PFLAG_DIRTY_MASK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;PFLAG_DRAWN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;     * Draw traversal performs several drawing steps which must be executed&lt;/span&gt;
&lt;span class="cm"&gt;     * in the appropriate order:&lt;/span&gt;
&lt;span class="cm"&gt;     *&lt;/span&gt;
&lt;span class="cm"&gt;     *      1. Draw the background&lt;/span&gt;
&lt;span class="cm"&gt;     *      2. If necessary, save the canvas&amp;#39; layers to prepare for fading&lt;/span&gt;
&lt;span class="cm"&gt;     *      3. Draw view&amp;#39;s content&lt;/span&gt;
&lt;span class="cm"&gt;     *      4. Draw children&lt;/span&gt;
&lt;span class="cm"&gt;     *      5. If necessary, draw the fading edges and restore layers&lt;/span&gt;
&lt;span class="cm"&gt;     *      6. Draw decorations (scrollbars for instance)&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;

    &lt;span class="c1"&gt;// Step 1, draw the background, if needed&lt;/span&gt;
    &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;saveCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;dirtyOpaque&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;drawBackground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// skip step 2 &amp;amp; 5 if possible (common case)&lt;/span&gt;
    &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;viewFlags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mViewFlags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;boolean&lt;/span&gt; &lt;span class="nx"&gt;horizontalEdges&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;viewFlags&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;FADING_EDGE_HORIZONTAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;boolean&lt;/span&gt; &lt;span class="nx"&gt;verticalEdges&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;viewFlags&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;FADING_EDGE_VERTICAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;verticalEdges&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;horizontalEdges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Step 3, draw the content&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;dirtyOpaque&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;onDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Step 4, draw the children&lt;/span&gt;
        &lt;span class="nx"&gt;dispatchDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Step 6, draw decorations (scrollbars)&lt;/span&gt;
        &lt;span class="nx"&gt;onDrawScrollBars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mOverlay&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;mOverlay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;mOverlay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOverlayView&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;dispatchDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// we&amp;#39;re done...&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;     * Here we do the full fledged routine...&lt;/span&gt;
&lt;span class="cm"&gt;     * (this is an uncommon case where speed matters less,&lt;/span&gt;
&lt;span class="cm"&gt;     * this is why we repeat some of the tests that have been&lt;/span&gt;
&lt;span class="cm"&gt;     * done above)&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;

    &lt;span class="kr"&gt;boolean&lt;/span&gt; &lt;span class="nx"&gt;drawTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;boolean&lt;/span&gt; &lt;span class="nx"&gt;drawBottom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;boolean&lt;/span&gt; &lt;span class="nx"&gt;drawLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;boolean&lt;/span&gt; &lt;span class="nx"&gt;drawRight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kr"&gt;float&lt;/span&gt; &lt;span class="nx"&gt;topFadeStrength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;float&lt;/span&gt; &lt;span class="nx"&gt;bottomFadeStrength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;float&lt;/span&gt; &lt;span class="nx"&gt;leftFadeStrength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;float&lt;/span&gt; &lt;span class="nx"&gt;rightFadeStrength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Step 2, save the canvas&amp;#39; layers&lt;/span&gt;
    &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;paddingLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mPaddingLeft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt; &lt;span class="nx"&gt;offsetRequired&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isPaddingOffsetRequired&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offsetRequired&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;paddingLeft&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;getLeftPaddingOffset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mScrollX&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;paddingLeft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;mRight&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;mLeft&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;mPaddingRight&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;paddingLeft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mScrollY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;getFadeTop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offsetRequired&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;getFadeHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offsetRequired&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offsetRequired&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;getRightPaddingOffset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;getBottomPaddingOffset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="nx"&gt;ScrollabilityCache&lt;/span&gt; &lt;span class="nx"&gt;scrollabilityCache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mScrollCache&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="kr"&gt;float&lt;/span&gt; &lt;span class="nx"&gt;fadeHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scrollabilityCache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fadingEdgeLength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;fadeHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// clip the fade length if top and bottom fades overlap&lt;/span&gt;
    &lt;span class="c1"&gt;// overlapping fades produce odd-looking artifacts&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;verticalEdges&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// also clip horizontal fades if necessary&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;horizontalEdges&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;verticalEdges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;topFadeStrength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getTopFadingEdgeStrength&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
        &lt;span class="nx"&gt;drawTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;topFadeStrength&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;fadeHeight&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;bottomFadeStrength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getBottomFadingEdgeStrength&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
        &lt;span class="nx"&gt;drawBottom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bottomFadeStrength&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;fadeHeight&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;horizontalEdges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;leftFadeStrength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getLeftFadingEdgeStrength&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
        &lt;span class="nx"&gt;drawLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;leftFadeStrength&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;fadeHeight&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;rightFadeStrength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getRightFadingEdgeStrength&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
        &lt;span class="nx"&gt;drawRight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rightFadeStrength&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;fadeHeight&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;saveCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSaveCount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;solidColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getSolidColor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;solidColor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HAS_ALPHA_LAYER_SAVE_FLAG&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;drawTop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;saveLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;drawBottom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;saveLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;drawLeft&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;saveLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;drawRight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;saveLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;scrollabilityCache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setFadeColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;solidColor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Step 3, draw the content&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;dirtyOpaque&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;onDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Step 4, draw the children&lt;/span&gt;
    &lt;span class="nx"&gt;dispatchDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Step 5, draw the fade effect and restore layers&lt;/span&gt;
    &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="nx"&gt;Paint&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scrollabilityCache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="nx"&gt;Matrix&lt;/span&gt; &lt;span class="nx"&gt;matrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scrollabilityCache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="nx"&gt;Shader&lt;/span&gt; &lt;span class="nx"&gt;fade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scrollabilityCache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shader&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;drawTop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setScale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fadeHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;topFadeStrength&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postTranslate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;fade&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalMatrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fade&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;drawBottom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setScale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fadeHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;bottomFadeStrength&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postRotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postTranslate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;fade&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalMatrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fade&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;drawLeft&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setScale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fadeHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;leftFadeStrength&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postRotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postTranslate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;fade&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalMatrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fade&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;drawRight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setScale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fadeHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;rightFadeStrength&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postRotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postTranslate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;fade&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalMatrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fade&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;restoreToCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;saveCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Step 6, draw decorations (scrollbars)&lt;/span&gt;
    &lt;span class="nx"&gt;onDrawScrollBars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mOverlay&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;mOverlay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;mOverlay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOverlayView&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;dispatchDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个方法中说得很清楚，View的渲染分6步，也可以省略第2和第5步。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;第一步，画背景&lt;/span&gt;
&lt;span class="err"&gt;第二步，可能的话（一般是要做动画），把&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="err"&gt;保存起来&lt;/span&gt;
&lt;span class="err"&gt;第三步，画内容&lt;/span&gt;
&lt;span class="err"&gt;第四步，画子控件&lt;/span&gt;
&lt;span class="err"&gt;第五步，还原第二部保存的&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;
&lt;span class="err"&gt;第六步，画装饰（&lt;/span&gt;&lt;span class="n"&gt;scrollbar&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就把整个视图画出来了。&lt;/p&gt;
&lt;h2&gt;Touch事件&lt;/h2&gt;
&lt;p&gt;在View中有很大部分是处理事件，包括按键事件，滚动球事件，触摸事件。这里主要讲触摸事件，因为这个用得最多。
这里主要有onTouch方法，dispatchTouch方法。dispatchTouch是个重要的方法，我们的触摸事件都是经过dispatchTouch分发下去的，但是View是子控件它的分发其实就是发送给自己。我看到源码里有这么一段：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onFilterTouchEventForSecurity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//noinspection SimplifiableIfStatement&lt;/span&gt;
        &lt;span class="n"&gt;ListenerInfo&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mListenerInfo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mOnTouchListener&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;
                &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mViewFlags&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;ENABLED_MASK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ENABLED&lt;/span&gt;
                &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mOnTouchListener&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onTouch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;onTouchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里说明如果你重载了一个View的onTouch方法，并且设置了它的OnTouchListener，那么它将调用OnTouchListener的方法，而不会调用本身的onTouch方法。
而onTouch的实现，主要是焦点处理，点击和安装事件的处理，并没有太多特别的东西。我一般考面试者View的touch事件哪些，从屏幕中点击一个按钮，事件是怎么传递的，相关的方法有哪些。这里ViewGroup有一个拦截事件方法（忘了单词怎么打），是View里没有的，又是怎么工作。这里很考面试者对触摸事件的理解，后续我会说。&lt;/p&gt;
&lt;p&gt;View还有一些重要的方法，这里就不一一列举，而且View的方法要结合ViewGroup的实现理解，下次写ViewGroup.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 20 Dec 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-12-20:androidyuan-ma-xue-xi-zhi-view.html</guid><category>Android源码学习 View</category></item><item><title>当做了一段时间的Android的困惑</title><link>http://szuwest.github.io/dang-zuo-liao-yi-duan-shi-jian-de-androidde-kun-huo.html</link><description>&lt;h1&gt;当做了一段时间的Android的困惑&lt;/h1&gt;
&lt;p&gt;当做一门技术到达一定的时间之后，就会陷入一个困境。不知道如何提高。任何一门技术，都是刚开始的时候，进步非常快，然后收获非常多，但是越往后越难有进步。因为因为任何一门技术都有一定的瓶颈，如何打破这个瓶颈，是很重要的。一旦打破这个瓶颈，就会进入下一个平台，下一个级别。然而第二个级别也还是会重复第一个级别的步骤。如此重复。&lt;/p&gt;
&lt;p&gt;我们大多数人都是会在第一个第二个级别上挣扎前进，无法突破。我不知道自己的Android技术现在时处在第一还是第二个级别，但是我现在确实遇到了瓶颈，感觉突破很艰难。最近产品上又有些需求比较难做，自己感觉可以实现，但是真要做出来，需要花很多时间和精力，还不能确定完全实现产品所需效果。而项目本身是比较紧急的，如果既要实现效果又要保证进度，估计我要不吃饭不睡觉才可以实现，这真是不可能的。其实这总结到一句话就是自己的实力还没达到随心所用的地步，特别是一些需要定制的动画交互方面的。这些效果别人都都能做出来了，但是自己要做同样的效果，需要绞尽脑汁。&lt;/p&gt;
&lt;p&gt;鸟厂的Android人才真的很少，有Android技术三年以上的人全公司估计少之又少。鸟厂其实人才不少，但是留不住，很多人呆了一年就离开，真是件令人悲伤的事，可是互联网行业还真是大部分公司都是这样子。有时候人真需要沟通交互才可以进步 更快。我已经很久没有试过这个感觉了。那种进步很快，跟大家交流碰出火花的情形少之又少，还是两年前刚来鸟厂的时候有这个感觉。有时候觉得挺孤独的。技术那时候的兄弟都离开了。项目最近两个月三个水平相当的兄弟离开了，这让我感觉到很寂寞。&lt;/p&gt;
&lt;p&gt;也许人前进的时候是注定是孤独的。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 14 Dec 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-12-14:dang-zuo-liao-yi-duan-shi-jian-de-androidde-kun-huo.html</guid><category>困惑，Android</category></item><item><title>关于Pelican上Disqus无法加载的问题</title><link>http://szuwest.github.io/guan-yu-pelicanshang-disquswu-fa-jia-zai-de-wen-ti.html</link><description>&lt;p&gt;最近发现我的博客Disqus加载不出来，以前是好好的。后来根据它的提示去找问题，找了半天也找不出问题所在。然后网上search，发现了一篇跟我类似的问题文章&lt;a href="http://whilgeek.github.io/posts/2014/07/we-were-unable-to-load-disqus/"&gt;这里&lt;/a&gt;。我的配置文件里确实有 &lt;code&gt;RELATIVE_URLS = True&lt;/code&gt;,把它设置为False也没用。检查了N遍shortname，到Disqus设置里各种试各种检查，都还是没有解决。&lt;/p&gt;
&lt;p&gt;没有办法，我只好在Disqus上重新创建一个新的site，然后回来配置相应的改了。run起来了，可以了。神了。&lt;/p&gt;
&lt;p&gt;不过经过这一次的折腾，我还学到不少别的东西。前段不太懂的人，真是悲剧。以后在这方面好好补补&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Mon, 01 Dec 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-12-01:guan-yu-pelicanshang-disquswu-fa-jia-zai-de-wen-ti.html</guid></item><item><title>快速滚动条(FastScroll)的定制</title><link>http://szuwest.github.io/kuai-su-gun-dong-tiao-fastscrollde-ding-zhi.html</link><description>&lt;p&gt;最近项目中因为要做定制快速滚动条功能而研究这块，发现还不是那么好做。&lt;/p&gt;
&lt;p&gt;我首先找了网上有类型功能应用，暂时只发现小米自动相册和腾讯的相册管家做了这个功能。然后网上找快速滚动条的定制的相关资料。最后发现只能通过style或者反射机制去改变快速滚动条，而且能改的东西非常有限----只能替换图片。但是小米和腾讯为什么能定制的那么好呢？小米可能是系统层面上改的，那腾讯的总不能也是吧。我只能去下载相册管家的包来反编译了。&lt;/p&gt;
&lt;p&gt;经过我反复看他们的代码和资源文件，终于找到了相关的类--ExpandableListView，这个跟系统的ExpandableListView不是同一个，只是单纯的名字相同而已。因为代码混淆过了，我花了很大力气虽然看懂了个大概，却是，没办法完全搞清一些细节性的东西。原理大致是这样：他们并没有去定制FastScroll，而是自己生成了一个叫ScrollPanel的View，然后把这个View画上去，并且对这个View设置了OnTouchListener，对用户的触摸事件处理，拖动的时候不断去滚动ListView，实现类型FastScroll的效果。&lt;/p&gt;
&lt;p&gt;由于它们的源代码混淆了很多细节看不了，我只好去参考系统的FastScroll源代码。虽然大致看懂了，但是自己去实现的时候，还是达不到想要的效果。因为时间和精力问题，我现在只能暂时放一放，之后有时间再研究，实在不行我心里也有其他曲线救国的方案可以试试。&lt;/p&gt;
&lt;p&gt;今天发现了一个类型功能的库，很不错。记录一下.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/szuwest/quickscroll"&gt;QuickScroll&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Thu, 27 Nov 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-11-27:kuai-su-gun-dong-tiao-fastscrollde-ding-zhi.html</guid><category>Android View Scroll</category></item><item><title>自定义DateView控件</title><link>http://szuwest.github.io/zi-ding-yi-dateviewkong-jian.html</link><description>&lt;p&gt;最近因为项目需要自定义一个日期控件，我花了一个多小时写了这个控件。虽然跟设计效果图还有点细微差别，但是这个可以慢慢修改。&lt;/p&gt;
&lt;p&gt;&lt;img alt="效果图1" src="http://image16-c.poco.cn/mypoco/myphoto/20141128/01/17538075320141128010028044.png" /&gt; &lt;img alt="效果图1" src="http://image16-c.poco.cn/mypoco/myphoto/20141128/01/17538075320141128010051063.png" /&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;DateView&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;DAY_TEXT_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;MONTH_TEXT_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mDay&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mMonth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mYear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;TextPaint&lt;/span&gt; &lt;span class="n"&gt;mDayPaint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;TextPaint&lt;/span&gt; &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;initView&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AttributeSet&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;initView&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AttributeSet&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;defStyleAttr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defStyleAttr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;initView&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;initView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mDayPaint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TextPaint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TextPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ANTI_ALIAS_FLAG&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mDayPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xff333333&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mMonthPaint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TextPaint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mDayPaint&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mDayPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTextSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dip2px&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;DAY_TEXT_SIZE&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;//        setBackgroundColor(Color.TRANSPARENT);&lt;/span&gt;
        &lt;span class="n"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Calendar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;getTimeInMillis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;setMinimumWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dip2px&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;setMinimumHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dip2px&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * 显示年月日&lt;/span&gt;
&lt;span class="cm"&gt;     * @param timeInSeconds 以秒为单位&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;timeInSeconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Calendar&lt;/span&gt; &lt;span class="n"&gt;ca&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Calendar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;ca&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;ca&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTimeInMillis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeInSeconds&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mMonth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ca&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Calendar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MONTH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;mYear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ca&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Calendar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;YEAR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ca&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Calendar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DAY_OF_MONTH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTextSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dip2px&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;MONTH_TEXT_SIZE&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;invalidate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * 设置时间，当year为0时，表示不需要显示年，只显示月日&lt;/span&gt;
&lt;span class="cm"&gt;     * @param day 1-31&lt;/span&gt;
&lt;span class="cm"&gt;     * @param month 1-12&lt;/span&gt;
&lt;span class="cm"&gt;     * @param year &amp;gt;= 0，0表示不显示年&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;mMonth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mMonth&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;mMonth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;mYear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mYear&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTextSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dip2px&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;MONTH_TEXT_SIZE&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTextSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dip2px&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;MONTH_TEXT_SIZE&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;invalidate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;dip2px&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dpValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getResources&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;getDisplayMetrics&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dpValue&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.5f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setTextColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mDayPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;invalidate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
    &lt;span class="n"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Canvas&lt;/span&gt; &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;dayText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%02d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mDay&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dayTextLen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;mDayPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;measureText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dayText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;canvasWith&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getWidth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;canvasHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canvasWith&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.75f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasHeight&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.25f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasWith&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.25f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasHeight&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.75f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mDayPaint&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dayText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasWith&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dayTextLen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasHeight&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;mDayPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getFontMetrics&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;descent&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mDayPaint&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


        &lt;span class="n"&gt;Paint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FontMetrics&lt;/span&gt; &lt;span class="n"&gt;fontMetrics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getFontMetrics&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;


        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;monthText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mMonth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;月&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//        int monthTextLen = (int)mMonthPaint.measureText(monthText);&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;textHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fontMetrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fontMetrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;descent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fontMetrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mYear&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;yearText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mYear&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yearText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasWith&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getTextSize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.5f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasHeight&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getTextSize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;1.5f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;monthText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasWith&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getTextSize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasHeight&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getTextSize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.5f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;monthText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasWith&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasHeight&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getTextSize&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这最不好做的就是算字的位置，文字的渲染是基于baseline的，我的理解是Rect的左下角。关于canvas的draw还有很多不懂，好好学习&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Fri, 21 Nov 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-11-21:zi-ding-yi-dateviewkong-jian.html</guid><category>Android 自定义控件 日期控件</category></item><item><title>Activity动画（二）</title><link>http://szuwest.github.io/activitydong-hua-er.html</link><description>&lt;h1&gt;Activity动画（二）&lt;/h1&gt;
&lt;p&gt;如果要统一所有的Activity的打开可关闭动画，可以有一个很简便的方法：就是设置Application的theme。在Application的theme里有一个Android:windowAnimationStyle的属性，可以定义了一个Activity的打开和关闭动画。例如下面的例子就自定义了一个theme。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;````
&lt;style name="ThemeLightNoTitle" mce_bogus="1" parent="@android:style/Theme.Light.NoTitleBar"&gt;
        &lt;item name="android:windowAnimationStyle"&gt;@style/AnimationActivity&lt;/item&gt;
    &lt;/style&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;style&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;AnimationActivity&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;mce_bogus=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;parent=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@android:style/Animation.Activity&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:activityOpenEnterAnimation&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@anim/translate_between_interface_right_in&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:activityOpenExitAnimation&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@anim/translate_between_interface_left_out&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:activityCloseEnterAnimation&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@anim/translate_between_interface_left_in&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:activityCloseExitAnimation&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@anim/translate_between_interface_right_out&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:taskOpenEnterAnimation&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@anim/translate_between_interface_right_in&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:taskOpenExitAnimation&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@anim/translate_between_interface_left_out&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:taskCloseEnterAnimation&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@anim/translate_between_interface_left_in&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:taskCloseExitAnimation&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@anim/translate_between_interface_right_out&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;````&lt;/p&gt;
&lt;p&gt;将这个theme运用到Application的theme里，所以的Activity就会按照你定义的动画来交互了。&lt;/p&gt;
&lt;p&gt;不过，现实的需求往往是更复杂的动画或者交互，不可能所有的界面的交互动画都一致的。有些页面需要特别定制，而且可能很复杂。例如我们要实现类似于iOS的NavigationViewController的页面右滑关闭页面的交互动画，或者要实现点击一张图片缩略图，然后它渐渐放大，点击关闭它又慢慢缩回原处的动画，按照之前介绍的方法，都无法实现。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在iOS自带相册APP里，点击一个缩略图，缩略图渐渐放大进入大图查看。这个交互基本成了一个相册必备的标准交互。Android上的相册很多也用了这种动画交互。如果缩略图的查看和大图查看都是在同一个Activity中完成的话，还是可以比较容易实现的。但是如果缩略的查看和大图的查看分处在不同的Activity中的话，那这就不是很好实现了。这里我准备讲讲可以怎么实现这个功能。而且这个方法可以推广出去，很多类型的Activity切换动画都可以按照这种方式实现。&lt;/p&gt;
&lt;p&gt;现在假设查看缩略图的Activity是A，查看大图的Activity是B。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;一 设置B的的theme为透明的transparent。&lt;/li&gt;
&lt;li&gt;二 在A中，启动B前，把一些必要的信息打包成Bundle传给B，启动B后把默认的启动动画覆盖,overridePendingTransition(0, 0)。例如把被点击的ImageView的在屏幕中的坐标，还有该ImageView的width和height，还有该ImageView所显示的图片资源id，或者URL，都存入Bundle中，讲该Bundle放入Intent中，启动B时传给B。&lt;/li&gt;
&lt;li&gt;三 在B的onCreate方法中，把Bundle中的信息取出来，并且对你想要做动画的ImageView中，获取ViewTreeObserver实例，加入一个OnPreDrawListener，在OnPreDrawListener的onPreDraw方法中，对ImageView做放大动画，初始位置就是从Bundle中获取，最终位置根据要显示的图片的大小来定。&lt;/li&gt;
&lt;li&gt;四 关闭B Activity时，对ImageView做一个缩小的动画，初始位置就是它现在的位置，最终位置是最开始从Bundle中获取的那个位置。覆盖Activity的finish方法，同样要将Activity的默认动画覆盖掉overridePendingTransition(0, 0)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们看一下具体怎么实现，有什么要注意的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一· 设置B的的theme为透明的transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;style&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Transparent&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:windowNoTitle&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:windowIsTranslucent&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:windowBackground&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@android:color/transparent&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;activity&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.example.android.activityanim.PictureDetailsActivity&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:label=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@string/subactivity_name&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:theme=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@style/Transparent&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里主要是将B Activity的window和它的背景设置成透明的。所有的Activity都有一个默认的样式，默认样式不是透明的。设置成透明的话，在启动B Activity时它的背景是透明的，并且调用overridePendingTransition(0, 0)覆盖掉默认动画，你不会觉察到已经从A进入到B界面。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;二. 在A中，启动B前，把一些必要的信息打包成Bundle传给B，启动B后把默认的启动动画覆盖,overridePendingTransition(0, 0)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Interesting data to pass across are the thumbnail size/location, the&lt;/span&gt;
        &lt;span class="c1"&gt;// resourceId of the source bitmap, the picture description, and the&lt;/span&gt;
        &lt;span class="c1"&gt;// orientation (to avoid returning back to an obsolete configuration if&lt;/span&gt;
        &lt;span class="c1"&gt;// the device rotates again in the meantime)&lt;/span&gt;
        &lt;span class="k"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;screenLocation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLocationOnScreen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;screenLocation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;PictureData&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mPicturesData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="n"&gt;subActivity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ActivityAnimations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;PictureDetailsActivity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getResources&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;getConfiguration&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;orientation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;subActivity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
                &lt;span class="n"&gt;putExtra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.orientation&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;orientation&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
                &lt;span class="n"&gt;putExtra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.resourceId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resourceId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
                &lt;span class="n"&gt;putExtra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.left&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;screenLocation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;
                &lt;span class="n"&gt;putExtra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.top&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;screenLocation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;
                &lt;span class="n"&gt;putExtra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getWidth&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;
                &lt;span class="n"&gt;putExtra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;

        &lt;span class="n"&gt;startActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subActivity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Override transitions: we don&amp;#39;t want the normal window animation in addition&lt;/span&gt;
        &lt;span class="c1"&gt;// to our custom one&lt;/span&gt;
        &lt;span class="n"&gt;overridePendingTransition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里有个关键点，获取被点击的View的在屏幕上的位置是通过getLocationOnScreen()方法。这个位置在B中很重要。另外还有宽高也是必须信息，被点击的图片resId或者URL等其他信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;二. 在B的onCreate方法中，把Bundle中的信息取出来，并且对你想要做动画的ImageView中，获取ViewTreeObserver实例，加入一个OnPreDrawListener，在OnPreDrawListener的onPreDraw方法中，对ImageView做放大动画，初始位置就是从Bundle中获取，最终位置根据要显示的图片的大小来定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为第一步，在用户觉察不到的情况下已进入Activity B,接下来只要在B的视图出现的时候，以一个缩略图放大的动画效果出现就行了。用户看到的效果是点击了A的一个缩略图，缩略图逐渐放大的过程，用户很容易认为这是在A中完成的，实际上这所有的动画都是在B中完成的。看看B中相关的代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Retrieve the data we need for the picture/description to display and&lt;/span&gt;
    &lt;span class="c1"&gt;// the thumbnail to animate it from&lt;/span&gt;
    &lt;span class="n"&gt;Bundle&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getIntent&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;getExtras&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="n"&gt;bitmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BitmapUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getBitmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getResources&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE_NAME&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.resourceId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE_NAME&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;thumbnailTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE_NAME&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.top&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;thumbnailLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE_NAME&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.left&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;thumbnailWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE_NAME&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;thumbnailHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE_NAME&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;mOriginalOrientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE_NAME&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.orientation&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;mBitmapDrawable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BitmapDrawable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getResources&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;bitmap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setImageDrawable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mBitmapDrawable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;ViewTreeObserver&lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getViewTreeObserver&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addOnPreDrawListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ViewTreeObserver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnPreDrawListener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
            &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;onPreDraw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getViewTreeObserver&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;removeOnPreDrawListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="c1"&gt;// Figure out where the thumbnail and full size versions are, relative&lt;/span&gt;
                &lt;span class="c1"&gt;// to the screen and each other&lt;/span&gt;
                &lt;span class="k"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;screenLocation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLocationOnScreen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;screenLocation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;mLeftDelta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thumbnailLeft&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;screenLocation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;mTopDelta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thumbnailTop&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;screenLocation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

                &lt;span class="c1"&gt;// Scale factors to make the large version the same size as the thumbnail&lt;/span&gt;
                &lt;span class="n"&gt;mWidthScale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;thumbnailWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getWidth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;mHeightScale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;thumbnailHeight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

                &lt;span class="n"&gt;runEnterAnimation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ViewTreeObserver是View树监听类，可以监听View的一些变化。其中ViewTreeObserver.OnPreDrawListener内部类，是当视图要被绘制时会被回调的类。我们只要在创建一个ViewTreeObserver.OnPreDrawListener实例，传给ViewTreeObserver，就可以在View被绘制时回调onPreDraw方法，我们所要做的就是在这个方法中开始动画。这里注意在动画开始前已经把要显示的图片设置上去了。
runEnterAnimation方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Set starting values for properties we&amp;#39;re going to animate. These&lt;/span&gt;
    &lt;span class="c1"&gt;// values scale and position the full size version down to the thumbnail&lt;/span&gt;
    &lt;span class="c1"&gt;// size/location, from which we&amp;#39;ll animate it back up&lt;/span&gt;
    &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setPivotX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setPivotY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setScaleX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mWidthScale&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setScaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mHeightScale&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTranslationX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mLeftDelta&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTranslationY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mTopDelta&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Animate scale and translation to go from thumbnail to full size&lt;/span&gt;
    &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setDuration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
            &lt;span class="n"&gt;scaleX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
            &lt;span class="n"&gt;translationX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;translationY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
            &lt;span class="n"&gt;setInterpolator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sDecelerator&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段代码先将ImageView从大图缩小到我们点击的那个缩略图的大小和位置，然后开始放大动画到它大图显示的样子。这样就实现了我们想要的点击缩略图放大到大图的效果。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;关闭B Activity时，对ImageView做一个缩小的动画，初始位置就是它现在的位置，最终位置是最开始从Bundle中获取的那个位置。覆盖Activity的finish方法，同样要将Activity的默认动画覆盖掉overridePendingTransition(0, 0)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// override transitions to skip the standard window animations&lt;/span&gt;
    &lt;span class="n"&gt;overridePendingTransition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * Overriding this method allows us to run our exit animation first, then exiting&lt;/span&gt;
&lt;span class="cm"&gt; * the activity when it is complete.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onBackPressed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;runExitAnimation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// *Now* go ahead and exit the activity&lt;/span&gt;
            &lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;runExitAnimation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Runnable&lt;/span&gt; &lt;span class="n"&gt;endAction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Animate image back to thumbnail size/location&lt;/span&gt;
    &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setDuration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
               &lt;span class="n"&gt;scaleX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mWidthScale&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mHeightScale&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
               &lt;span class="n"&gt;translationX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mLeftDelta&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;translationY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mTopDelta&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
                            &lt;span class="n"&gt;withEndAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endAction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当用户关闭界面的时候，先执行ImageView的缩小动画，缩小到原来缩略图的位置。当动画结束后，finish掉Activity并覆盖掉默认的Activity动画。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结：第一步先要把Activity的theme变成透明。第覆盖掉Activity的启动或者关闭的默认动画效果。第三步如果要做进入动画，则可以实现ViewTreeObserver.OnPreDrawListener接口，在onPreDraw方法中做动画。如果是做退出动画，可以先对视图做动画，在动画结束的时候调用finish方法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/szuwest/ActivityAnimations"&gt;demo代码&lt;/a&gt;.该demo是dev-bytes上的demo代码。&lt;/p&gt;
&lt;h2&gt;扩展&lt;/h2&gt;
&lt;p&gt;如果B要支持左右滑动查看大图，然后在查看某已图片时点击返回键，图片要缩小至该图缩略图的位置上，这该怎么做？
这种需求改变对A变化不大，但是对B的改变还是很大的，首先B要支持滑屏，一般来说要用到ViewPage或类似的控件。另外还有滑动时B如何获取数据，返回时如何获取当前大图对应的缩略图在A中的位置。我想实现方法应该有多种，我能想到的一种比较丑陋但是又比较简单的做法是，定义一个接口，声明了一些获取数据和缩略图位置等方法。然后A实现这个接口，传给B作为一个静态变量保存起来，这样A与B就可以通信了。这样只要B左右滑动的时候，A也保持一致的上下滑动，在B要关闭的时候，先获取到相应缩略图的问题，就能做动画了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Wed, 12 Nov 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-11-12:activitydong-hua-er.html</guid><category>Android 技术 动画</category></item><item><title>Android Activity动画</title><link>http://szuwest.github.io/android-activitydong-hua.html</link><description>&lt;h1&gt;Android 动画(一)&lt;/h1&gt;
&lt;h2&gt;3.0之前的动画&lt;/h2&gt;
&lt;p&gt;Android动画一直是Android的痛点。Android的动画系统跟iOS系统的动画系统比起来真心差很多，特别是2.3之前。在2.3之前，Android的动画分两种，帧动画和逐渐动画（Tween）.Tween动画包括alpha动画，translate动画，scale动画，rotate动画。这几种动画可以随意组合，产生更复杂的动画。但是我们想要做iOS的frame那样简单的动画，却是没有直接的方法。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;3.0之后的动画&lt;/h2&gt;
&lt;p&gt;在Android3.0版本，终于加入了更多的动画支持，API也更加友好。加入我property动画和value动画，大大增加了动画的灵活性和可定制性。可以通过ObjectAnimator很方便的写出动画代码。像iOS的frame动画，可以通过value动画来实现。还有因为property特性，可以实现一些特别的动画，并且不局限与view，理论上任何object都可以实现property动画。&lt;/p&gt;
&lt;h4&gt;nineOldAnimation&lt;/h4&gt;
&lt;p&gt;这个是向下兼容的Android动画库，使得在3.0之前的系统也可以实现property和value动画。不过这个库早已不维护了，我之前使用发现了一些bug，不过这影响不大。如果要兼容2.3和一下系统，这个是很不错的库。&lt;/p&gt;
&lt;h4&gt;Android4.4和5.0&lt;/h4&gt;
&lt;p&gt;Android4.0之后陆陆续续加了一些动画支持，例如4.1加了对activity的动画支持，4.4加了一些过度动画支持，而最新的5.0加了一个vectorDrawable，可以实现一些高级的向量动画。由于这些API需要较高版本支持，我们开发还不能完全用到，这个我也在研究当中。&lt;/p&gt;
&lt;p&gt;接下来我要讨论的时Activity动画，这个在我们开发中用得比较多，并且做得好的话，可以为应用增添不少分。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Activity动画&lt;/h1&gt;
&lt;p&gt;在Android2.0之后，Activity中加入了一个重要的API  &lt;code&gt;overridePendingTransition&lt;/code&gt;。这个方法在&lt;code&gt;startActivity&lt;/code&gt;方法之后调用的话，可以定义新打开的activity进入动画。例如你想实现像iOS的navigationController的从右往左的push动画，或者ModelViewController的从下往上弹出页面的动画，就可以通过这种方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;                                   &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuyDiamondsActivity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DIAMONDLISTACTION&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PhotoAlbumActivity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BuyDiamondsActivity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;startActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;overridePendingTransition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_left_in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_left_out&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;push_left_in.xml    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;set&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;translate&lt;/span&gt; &lt;span class="na"&gt;android:fromXDelta=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100%p&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:toXDelta=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:duration=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;alpha&lt;/span&gt; &lt;span class="na"&gt;android:fromAlpha=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:toAlpha=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:duration=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/set&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;push_left_out.xml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;set&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;translate&lt;/span&gt; &lt;span class="na"&gt;android:fromXDelta=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:toXDelta=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-40%p&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:duration=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;alpha&lt;/span&gt; &lt;span class="na"&gt;android:fromAlpha=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:toAlpha=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0.6&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:duration=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/set&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样，我们也可以在Activity的finish方法之后，调用&lt;code&gt;overridePendingTransition&lt;/code&gt;来自定义Activity退出动画。这里还有个小tips,如果你要实现A跳转到B，你又没办法改变或定制A如何跳转到B，你可以在B的onCreate方法里，调用父类的onCreate方法之前调用&lt;code&gt;overridePendingTransition&lt;/code&gt;也是有效的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;overridePendingTransition&lt;/code&gt;方法有个缺陷，它只支持XML文件声明的动画，在Android4.1之前（API16）我暂时还没有发现有别的方法可以用代码定义Activity跳转动画。&lt;/p&gt;
&lt;h2&gt;ActivityOptions&lt;/h2&gt;
&lt;p&gt;估计为了弥补&lt;code&gt;overridePendingTransition&lt;/code&gt;方法的不足，Google在Android4.1中加入一个新类ActivityOptions和一个新startActivity(Intent intent, Bundle options)方法。新的startActivity方法可以传入一个Bundle参数，这个Bundle可以包含了一些Activity的动画。这个Bundle数据从何而来，怎么创建，需要包含那些信息，这个你可以不用太过关心，ActivityOptions就是为产生这个Bundle而生的。来看看几个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Custom animations allow us to do things like slide the next activity in as we&lt;/span&gt;
&lt;span class="c1"&gt;// slide this activity out&lt;/span&gt;
&lt;span class="n"&gt;translateButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setOnClickListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnClickListener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Using the AnimatedSubActivity also allows us to animate exiting that&lt;/span&gt;
        &lt;span class="c1"&gt;// activity - see that activity for details&lt;/span&gt;
        &lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="n"&gt;subActivity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WindowAnimations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;AnimatedSubActivity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="c1"&gt;// The enter/exit animations for the two activities are specified by xml resources&lt;/span&gt;
        &lt;span class="n"&gt;Bundle&lt;/span&gt; &lt;span class="n"&gt;translateBundle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                &lt;span class="n"&gt;ActivityOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeCustomAnimation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WindowAnimations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slide_in_left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slide_out_left&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;toBundle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;startActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subActivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;translateBundle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过ActivityOptions.makeCustomAnimation的静态方法可以产生ActivityOptions对象，ActivityOptions有个toBundle的实例方法方便的将你定义的XML动画转化为Bundle数据。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Starting in Jellybean, you can also provide an animation that scales up the new&lt;/span&gt;
&lt;span class="c1"&gt;// activity from a given bitmap, cross-fading between the starting and ending&lt;/span&gt;
&lt;span class="c1"&gt;// representations. Here, we scale up from a thumbnail image of the final sub-activity&lt;/span&gt;
&lt;span class="n"&gt;thumbnail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setOnClickListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnClickListener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;BitmapDrawable&lt;/span&gt; &lt;span class="n"&gt;drawable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BitmapDrawable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;thumbnail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getDrawable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="n"&gt;bm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;drawable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getBitmap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="n"&gt;subActivity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WindowAnimations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AnimatedSubActivity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Bundle&lt;/span&gt; &lt;span class="n"&gt;scaleBundle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ActivityOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeThumbnailScaleUpAnimation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;thumbnail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;toBundle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;startActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subActivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scaleBundle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ActivityOptions.makeThumbnailScaleUpAnimation提供了更高级的功能：将一个缩略图方法的Activity动画。这个有时候挺有用的。ActivityOptions还提供了其他的一些方法，感兴趣的话可以参考它的API。
更多请参考&lt;a href="http://developer.android.com/reference/android/app/ActivityOptions.html"&gt;ActivityOptions API&lt;/a&gt; 和 &lt;a href="https://developer.android.com/training/material/animations.html"&gt;Google官方教程:Defining Custom Animations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下一节我会讲更高级更复杂的一些自定义Activity动画。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Mon, 03 Nov 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-11-03:android-activitydong-hua.html</guid><category>动画</category></item><item><title>技术，社交，生活</title><link>http://szuwest.github.io/ji-zhu-she-jiao-sheng-huo.html</link><description>&lt;h3&gt;技术不能停&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;最近看了很多其他技术人员的文章，然后我又从iOS转战Android，感觉自己弱爆了，自己的技术跟那些厉害的人根本没得比。有句话说，知道得越多，知道自己不知道越多。现在自己还有冲进，应该尽力学多一点。&lt;/p&gt;
&lt;p&gt;从计算机行业来说，技术千变万化，但是有些东西是基础性的。这些基本功决定你能走多远。算法，数据结构，编译原理，操作系统，这些基本的课程非常重要，而这又恰恰是我的弱项，我吃过这个亏。我想弥补。最近看微博看到&lt;strong&gt;陈皓&lt;/strong&gt;这样的大牛把leetcode的题目刷完了，真是佩服不已。我之前我到上面刷过一下子，但是没有坚持下来。主要是有些还是挺难的，而且英语还是有点吃力。我决定先从基本功开始，进行一个系统的学习。虽然网络上又很多资料，但是网络上的资料都是不系统的，只能参考而已，不能作为学习材料。&lt;/p&gt;
&lt;p&gt;所以我想从纸质书开始，我决定今后尽量少看任何社交软件，还有娱乐视频之类的，多一点时间看书。尽量调好作息时间，利用碎片化时间来学习。&lt;/p&gt;
&lt;h3&gt;关于工作&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;我从开始做C++的SDK，后来加入iOS项目组做iOS开发，再到最近的支持Android开发，大半年时间就变化这么多。项目也都是做到了一半就被停掉。XL公司的基因就是这样，没有办法稳定下来，公司架构频频变动，高管来一批打一炮又走了。项目做了一半又说方向不多，要转变，或者直接停掉。今天饭局上同事说要变革了，采用内部创业形式。我觉得挺好。想在公司内部就是太舒服，而且技术人员和产品经理都没有太多话语权。希望改革后能有所改变。&lt;/p&gt;
&lt;h3&gt;关于理财投资&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;有句话说你不理财，财不理你。自己工作也好几年了，没有什么积蓄。看到很多牛人都有房有车，更有甚的毕业一年就买宝马的年轻人。我也希望能好好理财，好好工作，攒点点把媳妇娶过来，所以前段时间开始买美股，现在是还亏了一点，不过我有信心赚回来。只不过要想挣点钱，还是需要一定的资金，现在自己不敢投太多。一切都可以慢慢来，只要坚持。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Thu, 23 Oct 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-10-23:ji-zhu-she-jiao-sheng-huo.html</guid><category>杂谈</category></item><item><title>Good Morning</title><link>http://szuwest.github.io/good-morning.html</link><description>&lt;p&gt;Hi, good morning. This is from West.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Wed, 15 Oct 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-10-15:good-morning.html</guid><category>Test</category></item><item><title>关于程序架构设计</title><link>http://szuwest.github.io/guan-yu-cheng-xu-jia-gou-she-ji.html</link><description>&lt;h1&gt;关于程序架构设计&lt;/h1&gt;
&lt;p&gt;最近编程当中，越来越在意程序架构问题，经常纠结怎样才是好的设计，怎样才能将程序解耦，怎样才能写出易扩展，层次分明好维护的程序。可是想来想去也是不能决定怎样做才是最佳。不过最近自己是肯定了一样东西：要想真的做出好的架构，划分好模块是第一次。只要模块划分的清晰，独立和少耦合，后面的事情就好做了。&lt;/p&gt;
&lt;p&gt;这种想法也不单单只有我才有，我现在所在项目负责人在一个程序架构设计的技术讲座上说过这个观点。而我从我们项目的架构也看出他是这样实行的。一般在我们建立项目之初，就先建立好目录结构，而这个目录结构也很讲究，它就直接体现了我们是怎么划分模块和划分层次的。现在我们项目主要分两大块，UI模块和module模块。然后UI目录下就按照功能划分出一个个子目录，对应的再module目录下也是按照功能划分出一个个子目录。这里UI目录下的子目录结构和module目录下的子目录结构基本是一致的。然后在资源文件目录下，也是按照UI子模块那样划分，建立不同的子资源文件。只要划分好了模块，每个模块足够独立的花，每个模块里面是怎么分层，怎么做设计的，对别的模块影响不大。即使这个某个模块做得很烂，到时要重构的也只是那一个模块而已。&lt;/p&gt;
&lt;p&gt;现在我们公司的项目很多模块划分都不是特别好，能够做到像上面那样划分模块和架构的项目估计都是很多。互联网公司人员流动大，三两下就换一拨人，每拨人里面各个技术参差不齐，根本没办法做到很好的架构设计。但是上面这种基础的架构还是可以做的，而且是可以做好的。&lt;/p&gt;
&lt;p&gt;可是光是靠划分模块是做不到一个好的程序架构，而且一个项目有些模块是划分不出来或者跟其他模块联系很多。所以还有其他东西要做。分层就是一个。项目整体可以分层，还有模块里面也可以分层。最经典的分层就是MVC模式。像我们上面的分UI和module就是将项目按MVC分层，V,C分在了UI里，M对应的时module。一般来说，在M之下，还有一层是数据访问层，一般是数据库访问层或者是网络访问层。实际项目都很复杂，各种关联，划分好层次解耦不是件容易的事。还有为了好管理代码和复用，是需要抽出一下共用模块的。例如网络访问的话一般是一个全局共用模块，还有几乎每个移动项目必不可少的图片管理模块等。&lt;/p&gt;
&lt;p&gt;以上说的都是在宏观方面的，真正落实到一行行代码间又有更多要注意的了。这里又有一套编码要遵循规则：API设计，接口设计原则，设计模式等。最近我经常烦的是这个类是不是太大了，要怎么分割才好。这个方法是放在这个类好，还是放在那个类好，还是新建一个类来封装？很多时候我自己都不知道怎样做才是对的，或者说是最好的。我越发觉得自己很弱，很多东西根本无法判断优劣。自己还是太嫩了，代码写的远远不够。每当这个时候我自己就会信心不足。&lt;/p&gt;
&lt;p&gt;唯有多写代码和思考来减少为自己的无知带来的恐惧&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 22 Jun 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-06-22:guan-yu-cheng-xu-jia-gou-she-ji.html</guid><category>编程感悟</category></item><item><title>swift初探</title><link>http://szuwest.github.io/swiftchu-tan.html</link><description>&lt;h1&gt;swift初探&lt;/h1&gt;
&lt;p&gt;自从swift公布以来，火得不得了。如果你是开发者，还没有看过swift，那还真是out了（不过话说回来，并不是没有看过swift就不是好开发者。好的程序员跟看没看过某种语言没有什么关系）。我从公布以来就断断续续的看，一直在看官方的英文文档。偶尔也看看别人写的或者翻译的文章。现在虽然没有把官方文档看完，但是也看了大部分，可以写写感想心得。&lt;/p&gt;
&lt;p&gt;简单来说，swift是集合了许多脚本语言的特性而又不像其他一般的脚本语言的苹果新生代开发语言。swift集合了很多语言的特性，如ruby，object-c，c++，c#等，其中长得最像的应该是ruby。咋看之下swift就想ruby一样的脚本语言。完全面向对象，类型定义，closure特性，函数式编程等等。不过据官方文档介绍，swift语言不是解释型语言，它最终会编译成二进制代码，并且它的运行效率比object-c要快。说比object-C要快我是比较怀疑的，而外国开发者进行了测试，得出结论是如果不强加一些编译优化的话，是快不过objC的。&lt;/p&gt;
&lt;p&gt;如果对ruby，Object-C，c++语言熟悉的话，学起swift来应该没有什么难度。但是它还有很多语法特性是别的语言没有的，并且有些在我看来有点奇怪的特性。不过这是都没有什么，说明自己见识少，熟悉了就好了。首先一个比较特别的是，你不在需要在每行代码结束时加上分号，直接回车换行就行。当然，如果你一行有多句代码，每一句的末尾还是要加分号的。然后另外一个我自己不太适应的是if语句的判断表达式不再需要用括号括起来，我自己感觉很别扭。当然，也还有别的语法，不同，例如函数的定义用func，返回值的表示用"-&gt;".Object-C那种方法调用方式不再有，所有的都是用.来访问和调用。我觉得swift基本上对所有的一些语法特性都是借鉴其他语言一些优秀特性，并且加入了自己特有的方式，形成swift自己独特的语法。比如说函数的形式参数，像c++一样是用括号括起来，可以有默认值，并且可以有外部标签，就是像Object-C一样对每个参数加个标签标明它的意义。还有不知道是否是独创的通过tuple支持多返回值。还有对闭包的支持。我自己的理解是Object-C的block也属于闭包，但是它语法是类C的，swift的closure是纯正的闭包特性，而且可以简化到令人发指的地步。&lt;/p&gt;
&lt;p&gt;swift可以说是很多语言的集大成者，并且超越它所借鉴的那些语言。也是这是苹果要取代Object-C的原因。我以前很喜欢Object-C，现在也喜欢，只是swift出来之后就没那么喜欢了。因为我看到了一个更好的语言。我本身java写得最多，开始是对c++的怕和恨，到对java的喜欢，再到对它的厌倦，然后发现Object-C的不错进而对它喜爱。而现在我要跨越它，进入swift的领地。&lt;/p&gt;
&lt;p&gt;未完待续...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 22 Jun 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-06-22:swiftchu-tan.html</guid><category>swift</category></item><item><title>Hello world</title><link>http://szuwest.github.io/hello-world.html</link><description>&lt;h1&gt;Hello World&lt;/h1&gt;
&lt;p&gt;Hello, world. This is first test.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Tue, 10 Jun 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-06-10:hello-world.html</guid><category>Test</category></item></channel></rss>